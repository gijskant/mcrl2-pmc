<refentry id="ltsconvert">
 <info>
  <date>2005-2007</date>
 </info>

<refmeta>
  <refentrytitle>ltsconvert</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo class="source">ltsconvert</refmiscinfo>
  <refmiscinfo class="version"></refmiscinfo>
  <refmiscinfo class="manual">User Commands</refmiscinfo>
</refmeta>

<refnamediv>
  <refname>ltsconvert</refname>
  <refpurpose>convert an LTS</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <cmdsynopsis>
    <command>&ltsconvert;</command>
    <arg choice="plain" rep="repeat"><arg choice="opt">&option;</arg></arg>
    <arg choice="opt">&infile;
      <arg choice="opt">&outfile;</arg>
    </arg>
  </cmdsynopsis>
</refsynopsisdiv>

<refsect1>
  <title>Description</title>
  <para>
    The ltsconvert tool converts the labelled transition system (LTS) in
    &infile; to &outfile; in the requested format after applying the selected
    minimisation method to &infile; (default is no minimisation). If &outfile;
    is not supplied, &cstdout; is used. If &infile; is not supplied, &cstdin; is
    used.
  </para>

  <para>
    The output format is determined by the extension of &outfile;, whereas the
    input format is determined by the content of &infile;. Options &opt_in;
    and &opt_out; can be used to force the input and output formats.  A list of
    supported formats can be requested by using the option &opt_formats;.
  </para>
 
  <para>
    In order to convert a non-mCRL2 LTS to a mCRL2 LTS one needs to supply the
    original LPS with &opt_lps;. This is because actions need to be stored in
    the internal mCRL2 format in mCRL2 and in non-mCRL2 LTSs are represented by
    strings (lacking essential information such as data types). 
  </para>

  <para>
    Note that tools that use the &fsm; format may depend on state information and
    parameter names. The former requires that the state information is in the
    input LTS file and the latter that the &opt_lps; option is used (see the
    options sections below).
  </para>
</refsect1>

<refsect1>
<title>Options</title>
<para>
  Mandatory arguments to long options are mandatory for short options too.
  <variablelist>
  <varlistentry>
    <term>&opt_h;</term>
    <term>&opt_help;</term>
    <listitem>
      <para>
        display help message and terminate
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_version;</term>
    <listitem>
      <para>
        display version information and terminate
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_q;</term>
    <term>&opt_quiet;</term>
    <listitem>
      <para>
        do not display warning messages
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_v;</term>
    <term>&opt_verbose;</term>
    <listitem>
      <para>
        display concise intermediate messages
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_d;</term>
    <term>&opt_debug;</term>
    <listitem>
      <para>
        display detailed intermediate messages
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_f;</term>
    <term>&opt_formats;</term>
    <listitem>
      <para>
       list accepted formats
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_i;&format;</term>
    <term>&opt_in;=&format;</term>
    <listitem>
      <para>use &format; format as the input format</para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_o;&format;</term>
    <term>&opt_out;=&format;</term>
    <listitem>
      <para>use &format; format as the output format</para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_l;&file;</term>
    <term>&opt_lps;=&file;</term>
    <listitem>
      <para>
        use &file; as the LPS from which the input LTS was generated; this is
        needed to store the correct parameter names of states when saving in
        &fsm; format and to convert non-mCRL2 LTSs to a mCRL2 LTS
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_n;</term>
    <term>&opt_no_state;</term>
    <listitem>
      <para>leave out state information when saving in &dot; format
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_D;</term>
    <term>&opt_determinise;</term>
    <listitem>
      <para>determinise the LTS
      </para>
    </listitem>
  </varlistentry>
  </variablelist>

  The following options are relevant for LTS minimisation only.

  <variablelist>
  <varlistentry>
    <term>&opt_none;</term>
    <listitem>
      <para>do not minimise the LTS (this is the default)
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_s;</term>
    <term>&opt_strong;</term>
    <listitem>
      <para>minimise using strong bisimulation
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_b;</term>
    <term>&opt_branching;</term>
    <listitem>
      <para>minimise using branching bisimulation
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_t;</term>
    <term>&opt_trace;</term>
    <listitem>
      <para>minimise using trace equivalence
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_u;</term>
    <term>&opt_weak_trace;</term>
    <listitem>
      <para>minimise using weak trace equivalence
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_a;</term>
    <term>&opt_add;</term>
    <listitem>
      <para>do not minimise but save a copy of the original LTS extended with a
      state parameter indicating the bisimulation class a state belongs to.
      This means that every state is extended with a number in such a way that
      (only) equivalent states have the same number. (This option only works
      for mCRL2 LTSs)
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>&opt_tau;=&actnames;</term>
    <listitem>
      <para>consider actions with a name in the comma separated list &actnames;
      to be a internal (tau) actions in addition to those defined as such by
      the input. This means that before minimisation all specified actions are
      first replaced by tau actions. In the case &opt_add; is used, these tau
      actions will only used internally to compute the equivalence classes; the
      output will have the original actions.
      </para>
    </listitem>
  </varlistentry>
  </variablelist>

</para>
</refsect1>

<refsect1>
<title>See also</title>
<para>
In case ltsconvert requires to much memory for bisimulation reductions one can
try the &ltsmin-lnk; tool. Note, however, that this tools is deprecated and can
only handle files in the mCRL2 SVC format.
</para>
</refsect1>

<refsect1>
<title>Author</title>
<para>
  Written by Muck van Weerdenburg. &bugreport;
</para>
</refsect1>

</refentry>
