% Type that represents a configuration
sort Configuration = struct configuration(valid : Bool);

% Type used for identifying messages sent by the controller
sort MessageType = struct
   identification |    % identification response
   capabilities |      % request/respond for capabilities
   configuration |     % tool configuration specification
   task_start |        % signal that a tool may start task execution
   task_stop |         % signal that a tool has stopped task execution
   display_layout |    % communicates a display layout
   display_data |      % communicates state changes of the display
   termination |       % request/response for tool the termination
   report;             % report

sort MessageData = struct empty | result(Bool) | other;

sort Address = Nat;

% Messages travel between a controller (address 0) and a tool instance (address 0 <)
sort Message = struct message(type : MessageType, data : MessageData);

act

   send, receive, communicate: Address#Message; % send or receive a message
   start_tool, tool_start: Nat;                 % create a new tool instance
   terminate_tool,tool_terminate: Nat;          % terminate a tool
   execute_task: Configuration;                 % perform the configured operation
   error;                                       % error action
   update_display, waiting;                     % other non-communication actions

% a: the tool id
proc unidentified_tool(a : Nat) =
      send(a, message(identification, other)).
        tool(a, configuration(false), false, false);

% a: the tool id
% c: configuration object
proc tool(a : Nat, c : Configuration, in_configuration : Bool, in_task : Bool) =
   terminate_tool(a).delta +
   receive(a, message(termination, empty)).           % received termination request
     send(a, message(termination, other)) +           % sends termination signal
   (receive(a, message(capabilities, empty)).         % received request for capabilities
      send(a, message(capabilities, other)) +         % response capabilities (tool)
    send(a, message(capabilities, empty)) +           % requested controller capabilities
    receive(a, message(capabilities, other)) +        % response capabilities (controller)
    send(a, message(display_layout, other)) +         % sent display layout
    send(a, message(display_data, other)) +           % sent display data
    receive(a, message(display_data, other)) +        % sent display data
    send(a, message(report, other))).
   tool(a, c, in_configuration, in_task) +
   (!in_configuration) ->
     ((!in_task) ->
       receive(a, message(configuration, empty)).
         tool(a, c, true, false)) <>                  % received a task specification
     (send(a, message(configuration, other)) +
       send(a, message(configuration, empty))).
         tool(a, configuration(true), false, false) +   % accepted task specification
   (!in_task) ->
     receive(a, message(task_start, empty)).          % task start signal
     tool(a, c, in_configuration,
             (valid(c) && !in_configuration)) <>
     (sum b : Bool.
       send(a, message(task_stop, result(b))).        % task finished or aborted
       tool(a, c, false, false));

% Workaround until proper support for finite sets is implemented
map set_add    : Nat # List(Nat) -> List(Nat);
    set_erase : Nat # List(Nat) -> List(Nat);

var x,xx : Nat;
    xs   : List(Nat);

eqn set_add(x,[]) = [x];
    set_add(xx,x|>xs) = if(xx in xs,xs,if(xx < x,xx|>x|>xs,x|>set_add(xx,xs)));
    set_erase(x,[]) = [];
    set_erase(xx,x|>xs) = if(xx == x,xs,x|>if(xx in xs,set_erase(xx,xs),xs));

% m: the maximum address of a running tool
% r: the set of active tools
% c: the set of active tools that are configured
% s: the set of active tools that are executing a task
proc controller(m : Nat, r : List(Nat), c : List(Nat), s : List(Nat)) =
 (sum a : Nat. (a <= m) -> (
   start_tool(a).controller(m,set_add(a,r),c,s) +   % starts a new tool instance
   (a in r) -> (                                    % for tool a:
     receive(a, message(identification, other)).    % received instance identifier
       controller(max(m,a),r,c,s) +
     (receive(a, message(capabilities, empty)).     % received request for capabilities
        send(a, message(capabilities, other)) +
      send(a, message(capabilities, empty)).        % sent request for capabilities of
        receive(a, message(capabilities, other)) +
      receive(a, message(report, other)) +          % report delivered
      receive(a, message(display_data, other)).     % update for display data
        update_display +
      send(a, message(display_data, other))).       % data from user interaction
     controller(m,r,c,s) +
     send(a, message(configuration, empty)).        % configuration request
       controller(m,r,set_erase(a,c),set_erase(a,s)) +
     send(a, message(termination, empty)).          % sent termination command
     receive(a, message(termination, other)).       % termination signal
      terminate_tool(a).
      controller(m,set_erase(a,r), set_erase(a,c),
                   set_erase(a,s)) +
     receive(a, message(display_layout, other)).    % display layout delivered
       controller(m,r,c,s) +
     receive(a, message(configuration, other)).     % configuration was accepted
       controller(m,r,set_add(a,c),s) +
     receive(a, message(configuration, empty)).     % configuration was rejected
       controller(m,r,c,s) +
    (sum b : Bool.
      receive(a, message(task_stop, result(b)))).
      ((a in s && a in c) ->
         controller(m,r,c,set_erase(a,s)) <>
         error.controller(m,r,c,s)) +               % task completed
    ((a in c) ->                                    % for tool a:
      send(a, message(task_start, empty)).
        controller(m,r,c,set_add(a,s))))));         % task start command

% Execution component (starts tools)
proc E(current : Nat, maximum : Nat) =
  (current < maximum) ->
        start_tool(current).E(current + 1, maximum);

init

  hide({error, waiting, execute_task, update_display,tool_terminate},
    allow({communicate, tool_start, tool_terminate,
                        error, waiting, execute_task, update_display},
      comm({send|receive -> communicate,start_tool|start_tool -> tool_start,
            terminate_tool|terminate_tool -> tool_terminate},
        controller(0,[],[],[]) || unidentified_tool(0) || E(0, 1))));
