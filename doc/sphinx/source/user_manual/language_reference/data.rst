Data specifications
===================

.. highlight:: mcrl2

This page describes all built-in data types with their associated functions and 
operators, and describes how custom data types can be defined.

Sorts (data types)
------------------

In mCRL2, a sort can be specified using a :token:`SortExpr`.

.. dparser:: ProjDecl ProjDeclList ConstrDecl ConstrDeclList SortExprList 
             SortExpr    

In an mCRL2 specification, sorts may be declared in a sort specification. In the
grammar below, a sort specification is generated by the non-terminal 
:token:`SortSpec`.

.. dparser:: SortDecl SortSpec 

Basic sorts
"""""""""""

The mCRL2 toolset implements a number of elementary sorts, listed in the table
below.

.. table:: Basic sorts in mCRL2

   =========== =======================
   ``Pos``     Positive numbers
   ----------- -----------------------
   ``Nat``     Natural numbers
   ----------- -----------------------
   ``Int``     Integers
   ----------- -----------------------
   ``Real``    Rationals
   =========== =======================

Any :token:`Number` that occurs in mCRL2 input is interpreted as a constant of
one of the integral sorts. All datatypes, including the standard data types, are
internally represented using abstract data types. This has the advantage that
numbers do not have a limited range. In particular, there is no largest number
in any of these domains, and there are no smallest integers and reals.

.. admonition:: Example

   If the mCRL2 toolset encounters the string ``1024`` in a context where a 
   ``Pos``, ``Nat``, ``Int`` or ``Real`` was expected, then it will be 
   interpreted as the decimal number ``1024`` of sort ``Pos``, as this is the
   most specific type that matches.

.. admonition:: Example

   To specify the decimal fractional value ``3.141592``, you will need to 
   specify it as a fraction, *i.e.*, ``3141592/1000000``.

Lists, sets and bags
""""""""""""""""""""

.. table:: Container sorts in mCRL2

   =================== =======================================
   :samp:`List({S})`   Lists with elements of sort :samp:`{S}`
   ------------------- ---------------------------------------
   :samp:`Set({S})`    Sets with elements of sort :samp:`{S}`
   ------------------- ---------------------------------------
   :samp:`Bag({S})`    Bags with elements of sort :samp:`{S}`
   =================== =======================================

Structured sorts
""""""""""""""""

Function sorts
""""""""""""""

User defined sorts
""""""""""""""""""

Data expressions
----------------

.. dparser:: DataExpr DataExprList BagEnumElt BagEnumEltList IdList VarDecl 
   VarsDecl VarsDeclList Assignment AssignmentList

Mappings
--------

.. dparser:: IdsDecl ConsSpec VarSpec MapSpec EqnDecl EqnSpec 
             MapSpec

Predefined mappings
"""""""""""""""""""

User defined mappings
"""""""""""""""""""""

Global variables
----------------

.. dparser:: GlobVarSpec


