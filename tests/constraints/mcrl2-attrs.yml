mcrl2:
  attrs: []
  pre:
    - |
      E = {'proc': [], 'var': [], 'act': [], 'sort': []}
  rules:
    - SortSpec.E = E
    - ActSpec.E = SortSpec.E
    - ProcSpec.E = ActSpec.E
    - Init.E = ProcSpec.E

init:
  attrs: [E]
  rules:
    - ProcExpr.E = E
    - ProcExpr.P = 1
    - ProcExpr.G = True
    - ProcExpr.pcrl = '?'
    
procspec:
  attrs: [E]
  rules:
    - ProcDecl.E = deepcopy(E)
  post:
    - E['proc'] = ProcDecl.E['proc']

procspecs:
  attrs: [E]
  rules:
    - ProcDecl.E = deepcopy(E)
    - ProcSpec.E = deepcopy(E)
    - ProcSpec.E['proc'] = ProcDecl.E['proc']
  post:
    - E['proc'] = ProcSpec.E['proc']
    
procdecl:
  attrs: [E]
  pre:
    - K = 'P' + str(len(E['proc']) + 1)
  rules:
    - Id = K
    - ProcExpr.E = E
    - ProcExpr.E['proc'] = E['proc'] + [(K, [])]
    - ProcExpr.P = 1
    - ProcExpr.G = False
    - ProcExpr.pcrl = 'pcrl'
 # post:
 #   - E['proc'] = E['proc'] + [(K, [])]
    
procdecllist:
  attrs: [E]
  pre:
    - K = 'P' + str(len(E['proc']) + 1)
  rules:
    - Id = K
    - VarsDeclList.E = E
    - VarsDeclList.L = len(E['var'])
    - VarsDeclList.U = []
    - VarsDeclList.Prefix = 'v'
    - ProcExpr.E = E
    - ProcExpr.E['var'] = E['var'] + VarsDeclList.U
    - ProcExpr.E['proc'] = E['proc'] + [(K, VarsDeclList.U)]
    - ProcExpr.P = 1
    - ProcExpr.G = False
    - ProcExpr.pcrl = 'pcrl'
 # post:
 #   - E['proc'] = E['proc'] + [(K, VarsDeclList.U)]

vsdecl:
  attrs: [E, U, L, Prefix]
  rules:
    - VarDecl.E = E
    - VarDecl.U = U
    - VarDecl.L = L + 1
    - VarDecl.Prefix = Prefix
  post:
    - U = VarDecl.U
    
vsdecls:
  attrs: [E, U, L, Prefix]
  rules:
    - VarDecl.E = E
    - VarDecl.U = []
    - VarDecl.L = L
    - VarDecl.Prefix = Prefix
    - VarsDeclList.E = E
    - VarsDeclList.U = []
    - VarsDeclList.L = VarDecl.L
    - VarsDeclList.Prefix = Prefix
  post:
    - |
      U = VarDecl.U + VarsDeclList.U    
    
vdecl:
  attrs: [E, U, L, Prefix]
  rules:
    - IdList.U = []
    - IdList.L = L 
    - IdList.Prefix = Prefix
    - SortExpr.T = None
    - SortExpr.Sorts = E['sort']
  post:
    - |
     U = [{'name': u, 'type': SortExpr.T} for u in IdList.U]
    - L = L + len(IdList.U)

pcinst:
  attrs: [K, E, A]
  guard: not K[1]
  rules:
    - Id = K[0]

pcinstlist:
  attrs: [K, E, A]
  guard: K[1]
  rules:
    - Id = K[0]
    - DataExprListInst.E = E
    - DataExprListInst.A = K[1] 

act:
  attrs: [A]
  pre:
    - Id = A

actdecl:
  attrs: [E]
  rules:
    - IdList.U = []
    - IdList.L = len(E['act'])
    - IdList.Prefix = 'a'
  post:
    - E['act'] = E['act'] + IdList.U
    
actspeclist:
  attrs: [E]
  rules:
    - IdList.U = []
    - IdList.L = len(E['act'])
    - IdList.Prefix = 'a'
    - ActDecls.E = E
    - ActDecls.E['act'] = E['act'] + IdList.U
  post:
    - E = ActDecls.E
    
actspec:
  attrs: [E]
  rules:
    - ActDecls.E = E
  post:
    - E = ActDecls.E

sortspec:
  attrs: [E]
  rules:
    - SortDecls.E = E
  post:
    - E = SortDecls.E

sortdecls1:
  attrs: [E]
  rules:
    - SortDecl.E = E
  post:
    - E = SortDecl.E

sortdecls2:
  attrs: [E]
  rules:
    - SortDecl.E = E
    - SortDecls.E = SortDecl.E
  post:
    - E = SortDecls.E

sortdecl1:
  attrs: [E]
  rules:
    - IdList.U = []
    - IdList.L = len(E['sort'])
    - IdList.Prefix = 'D'
  post:
    - |
      E['sort'] = E['sort'] + [{'name': x, 'type': None} for x in IdList.U]
    
sortdecl2:
  attrs: [E]
  pre:
    - K = 'D' + str(len(E['sort']) + 1)
  rules:
    - Id = K
    - SortExpr.T = K
    - SortExpr.Sorts = E['sort']
  post:
    - |
      E['sort'].append({'name': K, 'type': SortExpr.T})
     
    
# ProcExpr
pre_act:
  attrs: [E, P, G, pcrl]
  guard: |
    P <= 10
  pre:
    - K = choice(E['act'])
  rules:
    - Action.A = K
  post:
    - G = True
    
pre_pv:
  attrs: [E, P, G, pcrl]
  guard: |
    P <= 10 and G
  pre:
    - K = choice(E['proc'])
  rules:
    - ProcVarInst.E = E
    - ProcVarInst.K = K
    - ProcVarInst.A = len(K[1])
    
pre_delta:
  attrs: [E, P, G, pcrl]
  guard: P <= 10
  
pre_tau:
  attrs: [E, P, G, pcrl]
  guard: P <= 10
  
pre_brk:
  attrs: [E, P, G, pcrl]
  guard: P <= 10
  rules:
    - ProcExpr.E = E
    - ProcExpr.P = 1
    - ProcExpr.G = G
    - ProcExpr.pcrl = pcrl
  
pre_choice:
  attrs: [E, P, G, pcrl]
  guard: P <= 1 and pcrl != 'parallel'
  rules:
    - ProcExpr.E = E
    - ProcExpr.P = 1
    - ProcExpr.G = G
    - ProcExpr.pcrl = 'pcrl'    
    - ProcExpr2.E = E
    - ProcExpr2.P = 2
    - ProcExpr2.G = G
    - ProcExpr2.pcrl = 'pcrl'    

pre_sum:
  attrs: [E, P, G, pcrl]
  guard: P <= 2 and pcrl != 'parallel'
  rules: 
    - VarsDeclList.E = E
    - VarsDeclList.U = []
    - VarsDeclList.L = len(E['var']) 
    - VarsDeclList.Prefix = 'v'
    - ProcExpr.E = E
    - ProcExpr.E['var'] = E['var'] + VarsDeclList.U
    - ProcExpr.P = 2
    - ProcExpr.G = G
    - ProcExpr.pcrl = 'pcrl'
    
pre_pllel:
  attrs: [E, P, G, pcrl]
  guard: P <= 3 and pcrl != 'pcrl'
  rules: 
    - ProcExpr.E = E
    - ProcExpr.P = 4    
    - ProcExpr.G = G
    - ProcExpr.pcrl = 'parallel'
    - ProcExpr2.E = E
    - ProcExpr2.P = 3
    - ProcExpr2.G = G
    - ProcExpr2.pcrl = 'parallel'
    
pre_lftmrg:
  attrs: [V, W, P, G, Acts, pcrl]
  guard: P <= 4 and pcrl != 'parallel'
  rules: 
    - ProcExpr.V = V
    - ProcExpr.W = W
    - ProcExpr.P = 5    
    - ProcExpr2.V = V
    - ProcExpr2.W = W
    - ProcExpr2.P = 4   
    
pre_cond:
  attrs: [E, P, G, pcrl]
  guard: P <= 5 and pcrl != 'parallel'
  rules: 
    - DataExpr.T = ['bool']
    - DataExpr.W = E['var']
    - DataExpr.P = 14
    - ProcExpr.E = E
    - ProcExpr.pcrl = 'pcrl'
    - ProcExpr.P = 5
    - ProcExpr.G = G   

pre_seq:
  attrs: [E, P, G, pcrl]
  guard: P <= 7 and pcrl != 'parallel'
  rules: 
    - ProcExpr.E = E
    - ProcExpr.P = 8  
    - ProcExpr.G = G    
    - ProcExpr.pcrl = 'pcrl'
    - ProcExpr2.E = E
    - ProcExpr2.P = 7
    - ProcExpr2.G = True
    - ProcExpr2.pcrl = 'pcrl'
    
pre_time:
  attrs: [E, P, G, pcrl]
  guard: P <= 8
  rules: 
    - ProcExpr.E = E
    - ProcExpr.P = 8    
    - DataExpr.T = ['int', 'real', 'nat', 'pos']
    - DataExpr.W = E['var']
    - DataExpr.P = 14

pre_multact:
  attrs: [V, W, P, G, Acts, pcrl]
  guard: P <= 9
  rules: 
    - ProcExpr.V = V
    - ProcExpr.W = W
    - ProcExpr.P = 9    
    - ProcExpr2.V = V
    - ProcExpr2.W = W
    - ProcExpr2.P = 10
    
# SortExpr

constdecl:
  attrs: [U, L]
  pre:
    - K = 'd' + str(L) 
  rules:
    - Id = K
  post:
    - U = [K]
 
constdecllist:
  attrs: [U, L]
  pre:
    - K = 'd' + str(L) 
  rules:
    - Id = K
    - ConstrDeclList.E
    - ConstrDeclList.U = []
    - ConstrDeclList.L = L + 1
  post:
    - U = [K] + ConstrDeclList.U

se:
  attrs: [Sorts, T]
  rules:
    - SimpleSortExpr.Sorts = Sorts
    - SimpleSortExpr.T = T
  post:
    - T = SimpleSortExpr.T    
    
se_bool:
  attrs: [Sorts, T]
  post:
    - T = 'bool'

se_pos:
  attrs: [Sorts, T]
  post:
    - T = 'pos'

se_nat:
  attrs: [Sorts, T]
  post:
    - T = 'nat'

se_int:
  attrs: [Sorts, T]
  post:
    - T = 'int'

se_real:
  attrs: [Sorts, T]
  post:
    - T = 'real'    
    
se_ref:
  attrs: [Sorts, T]
  guard: |
    len(Sorts) > 0 and any(s for s in Sorts if s['type'] != None)
  pre:
    - K = choice([s for s in Sorts if s['type'] != None])
  rules:
    - Id = K['name']
  post:
    - T = K['type']
    
se_struct:
  attrs: [Sorts, T]
  guard: len(Sorts) > 0
  rules:
    - ConstrDeclList
    
# IdList

idlid:
  order: left
  attrs: [U, L, Prefix]
  pre:
    - K = Prefix + str(L + 1)
 #   - K = choice(['u', 'v', 'w'])
    - U.append(K)
  rules:
    - Id = K

idlids:
  order: left
  attrs: [U, L, Prefix]
  pre:
    - K = Prefix + str(L + 1)
  #  - K = choice(['u', 'v', 'w'])
    - U.append(K)
  rules:
    - Id = K
    - IdList.U = U
    - IdList.L = L + 1
    - IdList.Prefix = Prefix
  post:
    - U = IdList.U
    
    
