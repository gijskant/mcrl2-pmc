import feature ;

# Feature for linking to the opengl library
feature.feature install : no yes ;

# For installing data (non-source code, executable or library)
rule install-data ( name : files * : directories ? ) {
  if install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {

    target = [ path.join $(DATA_DIR) $(directories) ] ;

    alias install-$(name)-data : : <install>no ;
   
    stage install-$(name)-data
          : $(files)
          : <location>$(target)
          ;
  }
}

rule install-binaries ( name : files * : condition ? ) {
  if install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {

    alias $(name)
          :
          : <install>no
          : $(condition)
          ;
   
    stage $(name)
          : $(files)
          : <install-type>EXE
            <dll-path>$(LIB_DIR)
            <location>$(BIN_DIR)
            <install>yes
          : $(condition)
          ;

    explicit name ;
  }
}

if [ modules.peek : OS ] = MACOSX {
  if install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {
    import $(TOP)/build/macosx/mac-bundle ;
 
    local mac_application_bundles = [ MATCH $(TOP)/src/(.*/.*).plist : [ glob $(TOP)/src/*/*.plist ] ] ;
 
    for bundle in $(mac_application_bundles) {
      mac-bundle $(bundle:B).app
           : /tools/$(bundle:P)//$(bundle:B)
             $(TOP)/src/$(bundle).plist
             $(TOP)/src/$(bundle).icns
           : <location>$(prefix)
             <dependency>/tools/$(bundle:P)//install
           ;
 
      explicit $(bundle:B).app ;
    }
 
    mac_application_bundles = [ MATCH .*/(.*) : $(mac_application_bundles) ] ;
 
    alias install-mac-bundles
            : $(mac_application_bundles).app
            ;
  }
}

IMPORT $(__name__)
       : install-data
         install-binaries
       : $(caller)
       : install-data
         install-binaries
       ;
