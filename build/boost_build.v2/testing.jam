import testing ;

# Runs a tool on a set of input files with command line arguments
#
# tool        the executable to run (target of an exe rule)
# options     positional options to the tool (excluding names of input/output files)
# path        the path relative to which input files are searched
# extensions  the extensions of files that are considered input
#
rule run_tool_on_examples ( tool : options * : paths + : extensions + ) {
  import path ;

  for path in $(paths) {
    if $(path) = "." {
      files = [ glob-tree *.$(extensions) ] ;
    }
    else {
      files = [ path.glob-tree $(path) : *.$(extensions) ] ;
    }

    for file in $(files) {
      local target = [ MATCH "^(.+)[.][^.]+$" : [ path.basename $(file) ] ] ;
 
      testing.make-test run
      	 : $(tool)
         : <testing.arg>$(options)
           <testing.input-file>$(file)
         : $(target:B)-test ;
    }
  }
}

# Runs a program on a set of input files in a given directory
#
# sources     the sources for the executable to run (target of an exe rule)
# paths       the paths relative to which input files are searched
# extensions  the extensions of files that are considered input
#
# the program is run once for each file found, with the absolute
# location of that file as command line argument
rule run_with_input ( sources + : paths + : extensions + ) {
  import path ;

  for path in $(paths) {
    if $(path) = "." {
      files = [ glob-tree *.$(extensions) ] ;
    }
    else {
      files = [ path.glob-tree $(path) : *.$(extensions) ] ;
    }

    for file in $(files) {
 
      results += [
 
        run $(sources)
               : "\"$(file)\""
               : # input files
               : # requirements
               : [ path.basename $(file) ]
      ] ;
    }
  }

  return $(results) ;
}

rule run_tool_expect_success ( name tool : options * : requirements * ) {
  results += [

    run $(tool)
           : $(options)
           : # input files
           : $(requirements)
           : $(name)
  ] ;

  return $(results) ;
}

rule run_tool_expect_failure ( name tool : options * : requirements * ) {
  results += [

    run-fail $(tool)
           : $(options)
           : # input files
           : $(requirements)
           : $(name)
  ] ;

  return $(results) ;
}

IMPORT $(__name__)
       : run_tool_on_examples
         run_tool_expect_success
         run_tool_expect_failure
       : $(caller)
       : run_tool_on_examples
         run_tool_expect_success
         run_tool_expect_failure
       ;
