import testing ;

# Finds all files that have a certain extension
# 
# Operates to a maximum of three levels deep recursively, starting from directory $root
#
rule examples_by_extension ( root : extensions + ) {
  return [ glob $(root)/*.$(extensions) $(root)/*/*.$(extensions) $(root)/*/*/*.$(extensions) ] ;
}

# Runs a tool on a set of input files with command line arguments
#
# tool        the executable to run (target of an exe rule)
# prefix      a prefix used for possible output files
# suffix      suffix of possible output files (extension part)
# options     positional options to the tool (excluding names of input/output files)
# path        the path relative to which input files are searched
# extensions  the extensions of files that are considered input
#
rule run_tool_on_examples ( tool prefix suffix ? : options * : paths + : extensions + ) {
  import path ;

  for path in $(paths) {
    for file in [ examples_by_extension $(path) : $(extensions) ] {
      local target = [ MATCH "^(.+)[.][^.]+$" : [ path.basename $(file) ] ] ;
      local output ;
 
      if ($(suffix)) {
        output = [ path.native $(BUILD_TOP)/$(target).$(suffix) ] ;
      }
 
      results += [
 
        run $(tool)
               : $(options)
                 "\"$(file)\""
                 $(output)
               : # input files
               : # requirements
               : $(prefix)-$(target)
      ] ;
    }
  }

  return $(results) ;
}

# Runs a program on a set of input files in a given directory
#
# program     the executable to run (target of an exe rule)
# paths       the paths relative to which input files are searched
# extensions  the extensions of files that are considered input
#
# the program is run once for each file found, with the absolute
# location of that file as command line argument
rule run_with_input ( program paths + : extensions + ) {
  import path ;

  for path in $(paths) {
    for file in [ examples_by_extension $(path) : $(extensions) ] {
 
      results += [
 
        run $(program)
               : "\"$(file)\""
               : # input files
               : # requirements
               : 
      ] ;
    }
  }

  return $(results) ;
}

rule run_tool_expect_success ( name tool : options * : requirements * ) {
  results += [

    run $(tool)
           : $(options)
           : # input files
           : $(requirements)
           : $(name)
  ] ;

  return $(results) ;
}

rule run_tool_expect_failure ( name tool : options * : requirements * ) {
  results += [

    run-fail $(tool)
           : $(options)
           : # input files
           : $(requirements)
           : $(name)
  ] ;

  return $(results) ;
}

IMPORT $(__name__)
       : run_tool_on_examples
         examples_by_extension
         run_tool_expect_success
         run_tool_expect_failure
       : $(caller)
       : run_tool_on_examples
         examples_by_extension
         run_tool_expect_success
         run_tool_expect_failure
       ;
