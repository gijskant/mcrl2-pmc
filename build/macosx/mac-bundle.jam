import type ;
import generators ;
import targets ;
import project ;
import "class" : new ;

include $(TOP)/build/config.jam ;

type.register MAC_APPLICATION_BUNDLE : app ;

generators.register-standard mac-application-bundle : EXE : MAC_APPLICATION_BUNDLE ;
actions make-bundle bind TOP BIN_DIR {
  echo $(<) $(>)
  mkdir -p $(<:BS).app/Contents/MacOS
  mkdir -p $(<:BS).app/Contents/Resources
  echo -n 'APPL????' > $(<:BS).app/Contents/PkgInfo
  cp $(TOP)/src/$(<:BS)/$(<:BS).plist $(<:BS).app/Contents
  cp $(TOP)/src/$(<:BS)/$(<:BS).icns $(<:BS).app/Contents/Resources
  cp $(<) $(<:BS).app/Contents/MacOS

  /Developer/Tools/SetFile -a C $(<:BS).app/Contents/MacOS/$(<:BS)
  /Developer/Tools/Rez -t APPL -o $(<:BS).app/Contents/MacOS/$(<:BS) $(TOP)/build/macosx/sample.r

  cp $(<:BS).app/Contents/MacOS/$(<:BS) $(<)
  cp $(<:BS).app/Contents/MacOS/$(<:BS) $(BIN_DIR)
}

rule application-bundle ( target : source : requirements * : default-build * ) {
  local project = [ project.current ] ;

  requirements += <action>make-bundle ;

  targets.main-target-alternative
     [ new typed-target $(target) : $(project) : MAC_APPLICATION_BUNDLE
     : [ targets.main-target-sources $(source) : $(target) ]
     : [ targets.main-target-requirements $(requirements) : $(project) ]
     : [ targets.main-target-default-build $(default-build) : $(project) ]
     ] ;
}

IMPORT $(__name__) : application-bundle : : application-bundle ;
