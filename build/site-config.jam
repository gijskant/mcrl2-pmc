project site-config
       : build-dir $(BUILD_TOP)
       ;

include $(TOP)/build/config.jam ;

import regex ;
import feature ;

# Extract build requirements from command line options
for option in [ modules.peek : ARGV ] {
  local temporary = [ MATCH ([^=]+)= : $(option) ] ;

  if $(temporary) {
    value  = [ MATCH [^=]+=([^=]+)$ : $(option) ] ;

    if ! [ MATCH ^(-).* : $(option) ] {
      build-options += <$(temporary)>$(value) ;
    }
  }
}

# Extract build requirements imported from build/config.jam
for option in $(BUILD_OPTIONS) {
  local temporary = [ MATCH ([^=]+)= : $(option) ] ;

  if $(temporary) {
    if ! [ feature.get-values $(temporary) : $(build-options) ] {
      value = [ MATCH [^=]+=([^=]+)$ : $(option) ] ;
     
      if ! [ MATCH ^(-).* : $(option) ] {
        build-options += $(value:G=<$(temporary)>) ;
      }
    }
  }
}

# Helper rule for extracting compiler/linker options from strings (unix oriented)
rule libraries_from_string ( name : ldflags + : requirements * : default * : usage-requirements * ) {
  local splitted ;
  local library_search_paths ;
  local library_link_paths ;
  local library_names ;
  local framework_names ;

  if [ modules.peek : NT ] {
    splitted = [ regex.split $(ldflags) " " ] ;
  }
  else {
    splitted = [ regex.split $(ldflags) " -" ] ;
  }

  for part in $(splitted) {
    if $(part) {
      if [ MATCH "^-?L(.*)$" : $(part) ] {
        local search_path = [ MATCH "-?L([^ ]+)[ ]*$" : $(part) ] ;
     
        library_search_paths += <search>$(search_path) ;
        library_link_paths += <link>shared:<xdll-path>$(search_path) ;
      }
      else if [ MATCH "^-?l(.*)$" : $(part) ] {
        local library_name = [ MATCH "-?l([^ ]+)[ ]*$" : $(part) ] ;
     
        lib $(name)$(library_name)
            :
            : <name>$(library_name) $(library_search_paths)
            :
            : $(framework_names) $(library_link_paths)
            ;
     
        library_names += $(name)$(library_name) ;
      }
      else if [ MATCH "-?framework (.*)$" : $(part) ] { # OS X specific
        local framework_name = [ MATCH "-?framework (([^ ]+)[ ]*)" : $(part) ] ;
     
        framework_names += <framework>$(framework_name) ;
      }
      else if [ modules.peek : NT ] {
        if [ MATCH "^/LIBPATH:(.*)$" : $(part) ] { # MSVC specific
          local search_path = [ MATCH "/LIBPATH(.*)$" : $(part) ] ;
      
          library_search_paths += <search>$(search_path) ;
        }
        else if ! [ MATCH "-.*" : $(part) ] {
          lib $(name)$(part)
              :
              : <name>$(part) $(library_search_paths)
              :
              : $(framework_names) $(library_link_paths)
              ;
         
          library_names += $(name)$(part) ;
        }
      }
    }
  }

  alias $(name) : $(library_names) : $(requirements) : $(default) : $(usage-requirements) ;
}

# OpenGL library
if $(OPENGL_NAME) {
  lib GLU : : <os>NT <name>glu32 ;
  lib GLU : : <os>CYGWIN <name>glu32 ;
  
  if $(OPENGL_LPATH) {
    lib opengl : : <name>$(OPENGL_NAME) <search>$(OPENGL_LPATH) : : <include>$(OPENGL_IPATH) <os>NT:<library>GLU ;
  }
  else if $(OPENGL_IPATH) {
    lib opengl : : <name>$(OPENGL_NAME) : : <include>$(OPENGL_IPATH) <os>NT:<library>GLU ;
  }
  else {
    if [ modules.peek : OS ] = MACOSX {
      alias opengl : : <toolset>darwin : : <framework>OpenGL ;
    }
    else {
      lib opengl : : <name>$(OPENGL_NAME) : : <os>NT:<library>GLU <os>CYGWIN:<library>GLU ;
    }
  }

  explicit opengl GLU ;
}
else {
  print-notice "Not building tools that depend on OpenGL!" ;

  feature.set-default opengl : no ;
}

if $(WX_CPPFLAGS) {

  libraries_from_string wx_base
	: $(WX_BASE_LDFLAGS)
        : <threading>multi
        :
        : <cxxflags>$(WX_CPPFLAGS)
          <define>USING_WX
          <wx>yes
          <toolset>msvc:<user-interface>gui
        ;

  if $(OPENGL_NAME) {
    libraries_from_string wx_gl
	: $(WX_GL_LDFLAGS)
        : <threading>multi
        :
        : <cxxflags>$(WX_CPPFLAGS)
          <define>USING_WX
          <wx>yes
          <opengl>yes
          <toolset>msvc:<user-interface>gui
          <library>opengl
        ;
  }
}
else {
  print-notice "Not building tools that depend on wxWidgets!" ;

  feature.set-default wx : no ;
}

if $(BOOST_LIBRARY_PATH) {
  boost-library-path = <library-path>$(BOOST_LIBRARY_PATH) ;
}

rule boost_library ( name : use-local-boost ? : use-system-boost ? ) {
  if $(use-local-boost) {
    alias boost_$(name) : /boost//$(name) : <threading>multi ;
  }
  else if ( $(BOOST_INCLUDE_PATH) && ( "default" != "$(BOOST_INCLUDE_PATH)" ) ) || $(use-system-boost) {
    if $(BOOST_INCLUDE_PATH) {
      lib boost_$(name)
             :
             : $(boost-library-path)
               <name>"boost_$(name)"
               <include>$(BOOST_ROOT) # currently needed for ASIO
             :
             : <define>BOOST_ALL_NO_LIB=1
               <include>$(BOOST_ROOT) # currently needed for ASIO and foreach
             ;
    }
    else {
      alias boost_$(name) : : <build>no ;
    }
  }
  else {
    alias boost_$(name) : /boost//$(name) : <threading>multi ;
  }

  explicit boost_$(name) ;
}

boost_library filesystem ;
boost_library program_options ;
boost_library regex ;
boost_library thread ;
boost_library signals : local ;
boost_library test : : system ;
boost_library system : local ;
boost_library md5 : local ;

lib z  : : <name>"z" ;
lib m  : : <name>"m" ;
lib dl : : <name>"dl" ;

alias winsock
    : winsock32 ws2_32
    : <os>CYGWIN:<define>__USE_W32_SOCKETS
      <os>CYGWIN:<define>_WIN32_WINNT=0x0501
      <os>NT:<define>__USE_W32_SOCKETS
      <os>NT:<define>_WIN32_WINNT=0x0501
    :
    : <os>CYGWIN:<define>__USE_W32_SOCKETS
      <os>CYGWIN:<define>_WIN32_WINNT=0x0501
      <os>NT:<define>__USE_W32_SOCKETS
      <os>NT:<define>_WIN32_WINNT=0x0501
    ;

lib winsock32 : : <name>"wsock32" ;
lib ws2_32 : : <name>"ws2_32" ;

if $(CADP_HEADERS) {
  lib bcg : : <name>BCG <search>$(CADP_LIBRARIES) ;
  lib bcg_io : : <name>BCG_IO <search>$(CADP_LIBRARIES) ;

  alias BCG : bcg bcg_io : : : <include>$(CADP_HEADERS) ;
}
else {
  print-notice "BCG format support for LTS library disabled!" ;

  alias BCG : : : : ;
}

if $(USE_CVC) {
  lib gmp
      :
      : <name>gmp
      ;

  lib cvc
      :
      : <name>cvc3
        <search>$(USE_CVC)/lib
      :
      : <define>HAVE_CVC
#        <define>HAVE___GNU_CXX__EXT_HASH_MAP
#        <define>HAVE___GNU_CXX__EXT_HASH_SET
        <library>gmp
        <include>$(USE_CVC)/include/cvc3
      ;
}
else {
  alias cvc ;
}

IMPORT $(__name__) : get-option is-option
                   : : get-option is-option ;
