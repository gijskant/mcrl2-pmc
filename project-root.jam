import path ;
import modules ;
import feature : feature ;

path-constant TOP             : . ;
path-constant BUILD_TOP       : ./bin ;
path-constant BOOST           : ./boost ;
path-constant REVISION_HEADER : ./src/mcrl2_revision.h ;

project mcrl2_toolset
       : build-dir $(BUILD_TOP)
       : requirements
          <cxxflags>-std=c++98
          <define>_FILE_OFFSET_BITS=64
       ;

# Feature to mark tools as experimental
feature experimental : no yes : optional dependency ;

# The known sub projects
use-project /root                      : . ;
use-project /libraries/md5pp           : src/squadt/libraries/md5pp/build ;
use-project /libraries/transport       : src/squadt/libraries/transport/build ;
use-project /libraries/sip             : src/squadt/libraries/sip/build ;
use-project /libraries/xml2pp          : src/squadt/libraries/xml2pp/build ;
use-project /boost/program_options     : boost/libs/program_options/build ;
use-project /boost/filesystem          : boost/libs/filesystem/build ;
use-project /boost/thread              : boost/libs/thread/build ;

# The SVN revision number with which tools will be tagged
if [ path.exists $(TOP)/utility/revision.jam ] {
  include $(TOP)/utility/revision.jam ; 

  make $(REVISION_HEADER)
       : maximum_revision
       : run_maximum_revision
       ;
}

alias mcrl2_revision
       : $(REVISION_HEADER)
       ;

if ! [ path.exists $(TOP)/config.jam ] {
  ECHO "Please configure your source tree!" ;

  exit ;
}

tools = [ MATCH src/(.*)/.* : [ glob src/*/Jamfile.v2 src/*/build/Jamfile.v2 ] ] ;

# Register tool projects
for tool in $(tools) {
  # Make tool project known under a nice name
  use-project /tools/$(tool) : src/$(tool) ;

  # Build by default
  build-project src/$(tool) ;
}

libraries = [ MATCH src/libraries/(.*)/build/.* : [ glob src/libraries/*/build/Jamfile.v2 ] ] ;

# Register library projects
for library in $(libraries) {
  # Make tool project known under a nice name
  use-project /libraries/$(library) : src/libraries/$(library)/build ;
}

include config.jam ;

# Custom rule to install a tool executable with the libraries it depends on
rule install_with_libraries ( tool ) {

  alias install
        : install-libraries
          install-binaries
        ;

  install install-binaries
        : $(tool)
        : <dll-path>$(LIB_DIR)
          <location>$(BIN_DIR)
        ;

  install install-libraries
        : $(tool)
        : <install-dependencies>on <install-type>SHARED_LIB
        : <location>$(LIB_DIR)
        ;

  explicit install install-binaries install-libraries ;
}

# Install when requested
if install in [ MATCH "^--(install)" : [ modules.peek : ARGV ] ] {
  alias install-tools
       : /tools/$(tools)//install
       ;
}

