path-constant TOP             : . ;
path-constant BUILD_TOP       : ./bin ;                  # Common build directory
path-constant BOOST_ROOT      : ./boost ;                # Boost prefix (packaged sources)
path-constant BOOST           : ./boost ;                # Boost prefix (possibly system)
path-constant REVISION_HEADER : ./src/mcrl2_revision.h ;

# Activate header cache
#modules.poke : HCACHEFILE : .jamdeps ;

include $(TOP)/build/config.jam ;

project toolset
       : build-dir $(BUILD_TOP)
       : requirements
          <define>_FILE_OFFSET_BITS=64
          <toolset>darwin:<define>__darwin__
          <toolset>darwin:<cxxflags>"-std=c++98 -ansi"
          <os>CYGWIN,<toolset>gcc:<runtime-link>static
          <os>CYGWIN,<toolset>gcc:<link>static
          <os>LINUX,<toolset>gcc:<cxxflags>"-std=c++98 -ansi"
          <toolset>msvc:<define>WIN32
          <toolset>msvc:<include>src/libraries/auxiliary/include/nt_portability
       : default-build
          <address-model>$(ADDRESS_MODEL)
          <variant>$(BUILD_VARIANT)
          $(BUILD_OPTIONS)
       ;

# The known sub projects
use-project /site-config               : build ;
use-project /libraries/transport       : src/squadt/libraries/transport/build ;
use-project /libraries/sip             : src/squadt/libraries/sip/build ;

# Register boost libraries
for library in [ MATCH boost/libs/(.*)/build/Jamfile.v2 : [ glob boost/libs/*/build/Jamfile.v2 ] ] {
  use-project /boost/$(library) : boost/libs/$(library)/build ;
}

tools = [ MATCH src/(.*)/.* : [ glob src/*/Jamfile.v2 ] ] ;

# Register tool projects
for tool in $(tools) {
  use-project /tools/$(tool) : src/$(tool) ;
}

libraries = [ MATCH src/libraries/(.*)/build/.* : [ glob src/libraries/*/build/Jamfile.v2 ] ] ;

# Register library projects
for library in $(libraries) {
  use-project /libraries/$(library) : src/libraries/$(library)/build ;
}

import feature : feature ;

# Feature to mark tools as basic experimental or deprecated
feature status : basic experimental deprecated : composite optional incidental propagated ;

if ! experimental in [ MATCH "^--enable-(experimental)" : [ modules.peek : ARGV ] ] {
  feature.compose <status>experimental : <build>no ;
}

if ! deprecated in [ MATCH "^--enable-(deprecated)" : [ modules.peek : ARGV ] ] {
  feature.compose <status>deprecated   : <build>no ;
}

feature squadt_support : disable enable : composite optional incidental ;

# Disable squadt support in tools
if ! squadt in [ MATCH "^--disable-(squadt)-support" : [ modules.peek : ARGV ] ] {
  feature.compose <squadt_support>enable
        : <define>ENABLE_SQUADT_CONNECTIVITY
          <dependency>/libraries/temporary//squadt_utility
          <library>/libraries/sip//sip_tool
          <xml2>interface
        ;
}

# Feature for linking to the xml2 library
feature xml2 : availability interface library : composite incidental optional link-incompatible ;

if $(XML2_CPPFLAGS) {
  feature.compose <xml2>availability : <build>yes ;
  feature.compose <xml2>interface    : <cxxflags>"$(XML2_CPPFLAGS)" ;
  feature.compose <xml2>library
        : <linkflags>"$(XML2_LDFLAGS)"
          <cxxflags>"$(XML2_CPPFLAGS)"
        ;
}
else {
  feature.compose <xml2>availability : <build>no ;
  feature.compose <xml2>interface    : <build>no ;
  feature.compose <xml2>library      : <build>no ;
}

# Feature for linking to wx widget libraries
feature wx : availability interface basic gl : composite incidental optional link-incompatible ;

if $(WX_CPPFLAGS) {
  feature.compose <wx>availability : <build>yes ;
  feature.compose <wx>interface
        : <cxxflags>"$(WX_CPPFLAGS)"
        ;
  feature.compose <wx>basic
        : <linkflags>"$(WX_BASE_LDFLAGS)"
          <cxxflags>"$(WX_CPPFLAGS)"
        ;
  feature.compose <wx>gl
        : <linkflags>"$(WX_GL_LDFLAGS)"
          <cxxflags>"$(WX_CPPFLAGS)"
        ;
}
else {
  feature.compose <wx>availability : <build>no ;
  feature.compose <wx>interface    : <build>no ;
  feature.compose <wx>basic        : <build>no ;
  feature.compose <wx>gl           : <build>no ;
}

rule on_mac_install_bundle ( target : executable info icon : requirements * ) {
  import os ;

  if [ os.name ] = MACOSX {
    include $(TOP)/build/macosx/bundle.jam ;

    make_bundle $(target) : $(executable) $(info) $(icon) : $(requirements) ;
  }
}

# Custom rule to install a tool executable with the libraries it depends on
rule install_with_libraries ( name : tools * : requirements * ) {
  if install in [ MATCH "^--(install)" "^(install)" : [ modules.peek : ARGV ] ] {
    alias $(name)
          : $(name)-libraries
            $(name)-binaries
          : $(requirements)
          ;
   
    stage $(name)-binaries
          : $(tools)
          : <dll-path>$(LIB_DIR)
            <location>$(BIN_DIR)
            $(requirements)
          ;
   
    stage $(name)-libraries
          : $(tools)
          : <install-dependencies>on <install-type>SHARED_LIB
            <location>$(LIB_DIR)
            <os>NT:<location>$(BIN_DIR)
          ;
   
    explicit $(tools) $(name)-binaries $(name)-libraries ;
  }
}

rule install_data ( name : files * : directories ? ) {
  if install in [ MATCH "^--(install)" "^(install)" : [ modules.peek : ARGV ] ] {

    target = [ path.join $(DATA_DIR) $(directories) ] ;
   
    install $(name)
          : $(files)
          : <location>$(target)
          ;
  }
}

local extensions = mcrl2 pnml fsm ;

# Install examples
install install_examples
     : [ glob ./examples/*.$(extensions) ./examples/*/*.$(extensions) ./examples/*/*/*.$(extensions) ]
     : <location>$(DATA_DIR)
       <install-source-root>.
     ;

# Aterm header files for compiling rewriter
install install_headers
     : /libraries/aterm//headers 
     : <location>$(INCLUDE_DIR)/aterm
     ;

alias install
     : /tools/$(tools)//install
       install_examples
       install_headers
     ;

# Install when requested
if ! install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {
  for tool in $(tools) {
    build-project src/$(tool) ;
  }

  explicit install install_examples install_headers ;
}

if [ path.exists $(TOP)/build/utility/revision.jam ] {
  include $(TOP)/build/utility/revision.jam ;

  import_revision ;
}
