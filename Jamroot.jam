import path ;
import modules ;
import feature : feature ;
import os : name ;

path-constant TOP             : . ;
path-constant BUILD_TOP       : ./bin ;
path-constant BOOST           : ./boost ;
path-constant REVISION_HEADER : ./src/mcrl2_revision.h ;

# Activate header chache
modules.poke : HCACHEFILE : .jamdeps ;

# Deployment target for Mac OS X
modules.poke : MACOSX_DEPLOYMENT_TARGET : 10.3 ;

if ! [ path.exists $(TOP)/build/config.jam ] {
  ECHO "Please configure your source tree!" ;

  exit ;
}

include $(TOP)/build/config.jam ;

project
       : build-dir $(BUILD_TOP)
       : requirements
          <cxxflags>-std=c++98
          <define>_FILE_OFFSET_BITS=64
          <toolset>darwin,<link>shared:<linkflags>"-undefined dynamic_lookup"
       : default-build
          <address-model>$(ADDRESS_MODEL)
          <variant>$(BUILD_VARIANT)
       ;

# The known sub projects
use-project /site-config               : build ;
use-project /libraries/md5pp           : src/squadt/libraries/md5pp/build ;
use-project /libraries/transport       : src/squadt/libraries/transport/build ;
use-project /libraries/sip             : src/squadt/libraries/sip/build ;
use-project /libraries/xml2pp          : src/squadt/libraries/xml2pp/build ;

# Register boost libraries
for library in [ MATCH boost/libs/(.*)/build/Jamfile.v2 : [ glob boost/libs/*/build/Jamfile.v2 ] ] {
  use-project /boost/$(library) : boost/libs/$(library)/build ;
}

tools = [ MATCH src/(.*)/.* : [ glob src/*/Jamfile.v2 src/*/build/Jamfile.v2 ] ] ;

# Register tool projects
for tool in $(tools) {
  use-project /tools/$(tool) : src/$(tool) ;
}

libraries = [ MATCH src/libraries/(.*)/build/.* : [ glob src/libraries/*/build/Jamfile.v2 ] ] ;

# Register library projects
for library in $(libraries) {
  use-project /libraries/$(library) : src/libraries/$(library)/build ;
}

# Feature to mark tools as basic experimental or deprecated
feature status : basic experimental deprecated : composite optional incidental propagated ;

if ! experimental in [ MATCH "^--enable-(experimental)" : [ modules.peek : ARGV ] ] {
  feature.compose <status>experimental : <build>no ;
}

if ! deprecated in [ MATCH "^--enable-(deprecated)" : [ modules.peek : ARGV ] ] {
  feature.compose <status>deprecated   : <build>no ;
}

feature squadt_support : disable enable : composite optional incidental ;

# Disable squadt support in tools
if ! squadt in [ MATCH "^--disable-(squadt)-support" : [ modules.peek : ARGV ] ] {
  feature.compose <squadt_support>enable
        : <define>ENABLE_SQUADT_CONNECTIVITY
          <library>/libraries/sip//sip_tool
          <xml2>interface
        ;
}

# Feature for linking to the xml2 library
feature xml2 : none interface library : composite incidental optional link-incompatible ;

if $(XML2_CPPFLAGS) {
  feature.compose <xml2>interface : <cxxflags>"$(XML2_CPPFLAGS)" ;
  feature.compose <xml2>library
        : <linkflags>"$(XML2_LDFLAGS)"
          <cxxflags>"$(XML2_CPPFLAGS)"
        ;
}
else {
  feature.compose <xml2>interface : <build>no ;
  feature.compose <xml2>library   : <build>no ;
}

# Feature for linking to wx widget libraries
feature wx : none interface basic gl : composite incidental optional link-incompatible ;

if $(WX_CPPFLAGS) {
  feature.compose <wx>interface
        : <cxxflags>"$(WX_CPPFLAGS)"
        ;
  feature.compose <wx>basic
        : <linkflags>"$(WX_BASE_LDFLAGS)"
          <cxxflags>"$(WX_CPPFLAGS)"
        ;
  feature.compose <wx>gl
        : <linkflags>"$(WX_GL_LDFLAGS)"
          <cxxflags>"$(WX_CPPFLAGS)"
        ;
}
else {
  feature.compose <wx>interface : <build>no ;
  feature.compose <wx>basic     : <build>no ;
  feature.compose <wx>gl        : <build>no ;
}

# Install when requested
if ! install in [ MATCH "^--(install)" "^(install)" : [ modules.peek : ARGV ] ] {

  # Build by default
  for tool in $(tools) {
    build-project src/$(tool) ;
  }

  # Dummy rule
  rule install_with_libraries ( name : tool * : property * ) {
  }

  # Dummy rule
  rule install_data ( name : files * : directories ? ) {
  }
}
else {

  # Custom rule to install a tool executable with the libraries it depends on
  rule install_with_libraries ( name : tools * : properties * ) {

    alias $(name)
          : $(name)-libraries
            $(name)-binaries
          : $(properties)
          ;

    stage $(name)-binaries
          : $(tools)
          : <dll-path>$(LIB_DIR)
            <location>$(BIN_DIR)
            $(properties)
          ;

    stage $(name)-libraries
          : $(tools)
          : <install-dependencies>on <install-type>SHARED_LIB
            <location>$(LIB_DIR)
            <os>NT:<location>$(BIN_DIR)
            $(properties)
          ;

    explicit $(tools) $(name)-binaries $(name)-libraries ;
  }

  rule install_data ( name : files * : directories ? ) {

    target = [ path.join $(DATA_DIR) $(directories) ] ;

    install $(name)
          : $(files)
          : <location>$(target)
          ;
  }

  alias install-tools
       : /tools/$(tools)//install
       ;

  extensions = mcrl2 pnml fsm ;

  # Install examples
  install examples
       : [ glob ./examples/*.$(extensions) ./examples/*/*.$(extensions) ./examples/*/*/*.$(extensions) ]
       : <location>$(DATA_DIR)
         <install-source-root>.
       ;

  # Aterm header files for compiling rewriter
  install headers
       : /libraries/aterm//headers 
       : <location>$(INCLUDE_DIR)/aterm
       ;
}

if [ path.exists $(TOP)/utility/revision.jam ] {
  include $(TOP)/utility/revision.jam ;

  import_revision ;
}
