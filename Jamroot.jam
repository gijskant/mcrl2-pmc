path-constant TOP             : . ;
path-constant BUILD_TOOLS     : ./build/boost_build.v2 ; # Common build directory
path-constant BUILD_TOP       : ./build/bin ;            # Common build directory
path-constant BOOST_ROOT      : ./3rd-party/boost ;      # Boost prefix (packaged sources)

# Activate header cache
modules.poke : HCACHEFILE : $(BUILD_TOP)/.jamdeps ;

# The known sub projects
use-project /site-config               : build ;
use-project /boost                     : 3rd-party/boost ;
use-project /libraries                 : libraries ;
use-project /workarounds               : build/workarounds ;

import path ;

include $(BUILD_TOOLS)/building.jam ;

project toolset
       : build-dir $(BUILD_TOP)
       : requirements
          <define>_FILE_OFFSET_BITS=64
          <define>REVISION=\\\"$(BUILD_TAG)\\\"
          <toolset>msvc:<pch>off
          <toolset>darwin,<bundle>no:<dylib-install-location>"$(LIB_DIR)"
          <use>/workarounds//configuration
          <link>static,<squadt-support>yes:<threading>multi
       : default-build
          <address-model>$(ADDRESS_MODEL)
          $(DEFAULT_BUILD_OPTIONS)
       ;

include $(BUILD_TOOLS)/installing.jam ;

if [ path.exists ./tools ] {
  import set ;
  import regex ;

  root  = [ path.make $(TOP) ] ; 
  tools = [ MATCH $(root)/tools/(.*)/.* : [ glob $(TOP)/tools/*/Jamfile.v2 ] ] ;

  # tools with new directory layout
  local ftools = [ MATCH $(root)/tools/(.*)/build/.* : [ glob $(TOP)/tools/*/build/Jamfile.v2 ] ] ;

  tools += $(ftools) ;

  local targets  = [ set.intersection [ MATCH "^([0-9a-zA-Z_]+)$" : [ modules.peek : ARGV ] ] : $(tools) ] ;
  local disabled = [ MATCH "^--disable-tools=([,0-9a-zA-Z_]+)$" : [ modules.peek : ARGV ] ] ;

  if ! $(targets) {
    targets = $(tools) ;
  }
  if $(disabled) {
    targets = [ set.difference $(targets) : [ regex.split "$(disabled)" "," ] ] ;
  }

  # Register tool projects
  for tool in $(targets) {
    # Register tool projects
    if ! $(tool) in $(ftools) {
      use-project /tools/$(tool) : tools/$(tool) ;
    }
    else {
      use-project /tools/$(tool) : tools/$(tool)/build ;
    }
  }

  # Install when requested
  if ! install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {
    # Introduce tool targets
    for tool in $(targets) {
      alias $(tool) : /tools/$(tool) ;
    }

    if ! $(tools) in $(targets) {
      ECHO "Building selected tools :" $(targets) ;

      targets = /tools/$(targets) ;
    }
    else {
      targets += /tools/$(targets) build-plugins ;
    }

#    stage build
#            : $(targets)
#            : <location>$(BUILD_TOP)/tools
#              <install-type>EXE
#              <hardcode-dll-paths>true
#            ;

    stage build-plugins
            : $(plugins)
            : <location>$(BUILD_TOP)/plugins
              <install-type>SHARED_LIB
            ;
  }
  else {
    feature.set-default install : yes ;

    if ! $(tools) in $(targets) {
      ECHO "Installing selected tools :" $(targets) ;

      # Introduce tool targets
      for tool in $(targets) {
        alias $(tool) : install ;
      }

      alias install
              : /tools/$(targets)//install
                install-shared-libraries
              ;

      targets = /tools/$(targets) ;
    }
    else {
      ECHO "Complete toolset installation in progress!" ;

      # Complete install
      alias install
              : /tools/$(targets)//install
                install-examples
                install-headers
              : <os>MACOSX,<wx>yes:<source>install-mac-bundles
                <dll-path>$(LIB_DIR)
                <dependency>install-shared-libraries
              ;

      # General examples
      stage install-examples
              : [ path.glob-tree $(TOP)/examples : *.txt *.mcrl2 *.pnml *.mcf *.fsm *.trc project.xml : .svn ]
              : <location>$(DATA_DIR)
                <install-source-root>.
              ;
 
      stage install-headers
              : /libraries/aterm//headers
              : <location>$(INCLUDE_DIR)/aterm
                <install-source-root>3rd-party/aterm/include
              ;

      targets = /tools/$(tools) ;
    }

  #  stage install-static-libraries
  #          : $(targets)
  #          : <location>$(LIB_DIR)
  #            <install-dependencies>on <install-type>STATIC_LIB
  #          ;

    stage install-shared-libraries
            : $(targets)//install
            : <location>$(LIB_DIR)
              <dll-path>$(LIB_DIR)
              <install-dependencies>on <install-type>SHARED_LIB
            ;

    stage install-shared-libraries
            : $(targets)
            : <location>$(BIN_DIR)
              <dll-path>$(LIB_DIR)
              <os>NT
              <install-dependencies>on <install-type>SHARED_LIB
            ;

    stage install-shared-libraries
            : $(targets)
            : <location>$(BIN_DIR)
              <dll-path>$(LIB_DIR)
              <os>CYGWIN
              <install-dependencies>on <install-type>SHARED_LIB
            ;
  }
}

