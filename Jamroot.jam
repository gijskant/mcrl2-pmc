path-constant TOP             : . ;
path-constant BUILD_TOP       : ./bin ;                  # Common build directory
path-constant BOOST_ROOT      : ./boost ;                # Boost prefix (packaged sources)
path-constant SETUP           : ./src ;                  # Header file for run-time configuration

# Activate header cache
# modules.poke : HCACHEFILE : .jamdeps ;

include $(TOP)/build/building.jam ;

# The known sub projects
use-project /site-config               : build ;
use-project /boost                     : boost ;
use-project /libraries                 : src/libraries ;
use-project /libraries/sip             : src/squadt/libraries/sip/build ;
use-project /workarounds/msvc          : build/workarounds/msvc ;

project toolset
       : build-dir $(BUILD_TOP)
       : requirements
          <include>build/workarounds
          <define>_FILE_OFFSET_BITS=64
          <define>REVISION=$(REVISION)
          <toolset>darwin:<define>__darwin__
          <toolset>darwin:<cxxflags>"-std=c++98 -ansi"
          <toolset>darwin:<arch>native
          <os>CYGWIN,<toolset>gcc:<runtime-link>static
          <os>CYGWIN,<toolset>gcc:<link>static
          <os>NT:<runtime-link>static
          <os>NT:<link>static
          <os>LINUX,<toolset>gcc:<cxxflags>"-std=c++98 -ansi"
          <toolset>msvc:<define>WIN32
          <toolset>msvc:<include>build/workarounds/msvc
          <os>NT,<toolset>gcc:<include>build/workarounds/mingw
       : default-build
          <address-model>$(ADDRESS_MODEL)
          <variant>$(BUILD_VARIANT)
          $(BUILD_OPTIONS)
       ;

tools = [ MATCH $(TOP)/src/(.*)/.* : [ glob $(TOP)/src/*/Jamfile.v2 ] ] ;

# Register tool projects
for tool in $(tools) {
  use-project /tools/$(tool) : src/$(tool) ;
}

import set ;

local targets = [ set.intersection [ MATCH "^([0-9a-zA-Z]+)$" : [ modules.peek : ARGV ] ] : $(tools) ] ;

# Install when requested
if ! install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {

  if $(targets) {
    for tool in $(targets) {
      alias $(tool)
            : build
            ;
    }
   
    targets = /tools/$(targets) ;
  }
  else {
    targets = /tools/$(tools) ;
  }

  stage build
          : $(targets)
          : <location>$(BUILD_TOP)/tools
            <install-type>EXE
            <hardcode-dll-paths>true
          ;
}
else {
  include $(TOP)/build/installing.jam ;

  feature.set-default install : yes ;

  if $(targets) {
    for tool in $(targets) {
      alias $(tool)
            : install
            ;
    }
   
    alias install
            : install-shared-libraries
              install-binaries
            ;

    targets = /tools/$(targets) ;
  }
  else {
    # Complete install
    alias install
            : install-shared-libraries
              install-static-libraries
              install-binaries
              install-plugins
              install-examples
              install-headers
            : <os>MACOSX:<source>install-mac-bundles
            ;

    targets = /tools/$(tools) ;
  }

  # General examples
  stage install-examples
          : [ path.glob-tree $(TOP)/examples : *.txt *.mcrl2 *.pnml *.fsm *.trc : .svn ]
          : <location>$(DATA_DIR)
            <install-source-root>.
          ;

  stage install-headers
          : [ path.glob-tree src/libraries/aterm : *.h : .svn ]
          : <location>$(INCLUDE_DIR)/aterm
            <install-source-root>src/libraries/aterm/include
          ;

  stage install-binaries
          : $(targets)
          : <location>$(BIN_DIR)
            <dll-path>$(LIB_DIR)
            <install-dependencies>on <install-type>EXE
          ;

  stage install-static-libraries
          : $(targets)
          : <location>$(LIB_DIR)
            <install-dependencies>on <install-type>STATIC_LIB
          ;

  stage install-shared-libraries
          : $(targets)
          : <location>$(LIB_DIR)
            <os>NT:<location>$(BIN_DIR)
            <dll-path>$(LIB_DIR)
            <install-dependencies>on <install-type>SHARED_LIB
          ;

  local tools_with_plugins = [ MATCH $(TOP)/(src/.*/plugins/.*)/Jamfile.v2 : [ glob $(TOP)/src/*/plugins/*/Jamfile.v2 ] ] ;

  stage install-plugins
          : $(tools_with_plugins)
          : <location>$(LIB_DIR)/plugins
            <install-type>SHARED_LIB
          ;

  explicit install-examples install-headers install-binaries install-plugins install-static-libraries install-shared-libraries ;
}
