# Author(s): Jeroen van der Wulp
#
#  Copyright (C) 2008 Eindhoven University of Technology.
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)
# 
# Main build description containing custom rules to make project descriptions more compact.
#
#  Options:
#
#   Build:
#
#    --enable-debug                 sets: debug-symbols=on runtime-debugging=on
#   
#    --enable-profile               sets: profiling=on
#
#    --enable-optimisation          sets: optimization=speed inlining=full
#
#    --disable-squadt-support       disables squadt support in tools
#   
#    --enable-experimental          activates building/installing of tools that are marked experimental
#
#    --enable-deprecated            activates building/installing of tools that are marked deprecated
#
#    --no-display-notice            configuration notice message are not printed
#
#   Installation:
#
#    --prefix                       directory relative to which tools/libraries, documentation and examples
#                                   are installed, unless one of the following options is also specified
#
#                                   Note: always do a clean build after changing the prefix!
#
#    --bindir                       directory where binaries are installed
#
#    --libdir                       directory where libraries are installed
#
#    --includedir                   directory where header files are installed
#
#    --datadir                      directory where data is installed
#
#    --mandir                       directory where man pages are installed
#
#    --destdir                      direcory that is prepended to all of the above paths for installation,
#                                   the built takes place as-if everything would be installed according to
#                                   be above arguments (for binary packaging)
#

import feature ;
import make ;
import path ;
import property ;
import regex ;
import set ;
import testing ;

import build/man ;

if [ modules.peek : OS ] = MACOSX {
  import build/macosx/mac-bundle ;
}

# Constants for commonly used paths
path-constant TOP             : . ;
path-constant BUILD_TOOLS     : ./build/boost_build.v2 ; # Common build directory
path-constant BUILD_TOP       : ./build/bin ;            # Common build directory
path-constant BOOST_ROOT      : ./3rd-party/boost ;      # Boost prefix (packaged sources)

# Activate header cache
modules.poke : HCACHEFILE : $(BUILD_TOP)/.jamdeps ;

# Feature for building/installing tools that use opengl
feature.feature opengl : yes no : optional incidental ;

# Feature for building/installing tools that use wxWidgets
feature.feature wx : yes no : optional incidental ;

# Feature for building/installing optional tools/libraries
feature.feature install : no yes ;

# Feature for data installation in subdirectory
feature.feature data-sub-location : : free ;

# Feature to mark tools as basic experimental or deprecated
feature.feature status : basic experimental deprecated : composite ;

# Specifies that squadt connectivity is implemented in a tool
feature.feature squadt-connectivity : none implemented : incidental composite ;

include $(TOP)/build/config.jam ;

if ! $(OPENGL_NAME) {
  feature.set-default opengl : no ;
}
if ! $(WX_CPPFLAGS) {
  feature.set-default wx : no ;
}

# Install when requested
if install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {
  feature.set-default install : yes ;
}

# Gets option arguments from options passed on the command line primarily and
# otherwise the BUILD_OPTIONS variable
local rule get-option ( name : default ) {
  local result = [ MATCH --$(name)=(.*) : [ modules.peek : ARGV ] $(BUILD_OPTIONS) ] ;

  if $(result) {
    return $(result[1]) ;
  }
  else {
    return $(default) ;
  }
}

local rule is-option ( name : default ) {
  local result = [ MATCH --($(name)) : [ modules.peek : ARGV ] $(BUILD_OPTIONS) ] ;

  if $(result) {
    return $(result[1]) ;
  }
  else {
    return $(default) ;
  }
}

# Prints message
local rule print-notice ( message ) {
  if [ is-option no-display-notice : no ] = no {
    ECHO "Notice: $(message)" ;
  }
}


# The known sub projects
use-project /site-config               : build ;
use-project /boost                     : 3rd-party/boost ;
use-project /libraries                 : libraries ;

# Extract build requirements from command line options
for option in [ modules.peek : ARGV ] {
  local temporary = [ MATCH ([^=]+)= : $(option) ] ;

  if $(temporary) {
    local value  = [ MATCH [^=]+=([^=]+)$ : $(option) ] ;
    local values = [ regex.split $(value) "," ] ;

    if ! [ MATCH ^(-).* : $(option) ] {
      build-options += <$(temporary)>$(values) ;
    }
  }
  else if $(option) in debug profile release {
    build-options += <variant>$(option) ;
  }
}

# Extract build requirements imported from build/config.jam
for option in $(BUILD_OPTIONS) {
  local temporary = [ MATCH ([^=]+)= : $(option) ] ;

  if $(temporary) {
    if ! [ feature.get-values $(temporary) : $(build-options) ] {
      local value = [ MATCH [^=]+=([^=]+)$ : $(option) ] ;

      if ! [ MATCH ^(-).* : $(option) ] {
        build-options += $(value:G=<$(temporary)>) ;
      }
    }
  }
}

link-variant = [ feature.get-values link : $(build-options) <link>shared ] ;
link-variant = $(link-variant[1]) ;

# Make sure the build tag variable is defined
if ! $(BUILD_TAG) {
  local revision = [ SHELL "svnversion -n \"$(TOP)\"" ] ;

  if ! $(revision) {
    $(revision) = "unknown" ;
  }

  BUILD_TAG = "$(revision)-$(link-variant[1])" ;
}

if [ get-option prefix : no ] = no {
  ECHO "Warning: missing final installation path!" ;
  ECHO "" ;
  ECHO "  This path information is needed at build time on some platforms to correctly install the toolset." ;
  ECHO "" ;
  ECHO "Hint: Use --prefix=<directory> argument." ;
  ECHO "" ;
}

prefix         = [ path.make $(TOP)/build/stage ] ;
install-prefix = [ get-option prefix : $(prefix) ] ;

# Set installation/stage locations
if [ feature.defaults <install> ] = <install>yes {
  prefix     = $(install-prefix) ;
  bindir     = [ get-option bindir     : [ path.make $(prefix)/bin ] ] ;
  libdir     = [ get-option libdir     : [ path.make $(prefix)/lib/mcrl2 ] ] ;
  plugindir  = [ path.make $(libdir)/plugins ] ;
  includedir = [ get-option includedir : [ path.make $(prefix)/include/mcrl2 ] ] ;
  datadir    = [ get-option datadir    : [ path.make $(prefix)/share/mcrl2 ] ] ;
  mandir     = [ get-option mandir     : [ path.make $(prefix)/share/man ] ] ;
}
else {
  bindir    = [ path.make $(prefix) ] ;
  libdir    = [ get-option libdir : [ path.make $(install-prefix)/lib/mcrl2 ] ] ;
  plugindir = [ path.make $(prefix)/plugins ] ;
}

if [ modules.peek : NT ] && [ feature.get-values link : $(build-options) ] != static {
  libdir = $(bindir) ;
}

if [ feature.defaults <opengl> ] = <opengl>no {
  print-notice "Not building tools that depend on OpenGL!" ;
}
if [ feature.defaults <wx> ] = <wx>no {
  print-notice "Not building tools that depend on wxWidgets!" ;
}


if [ is-option disable-squadt-support : no ] = no {
  feature.feature squadt-interface : enabled disabled : symmetric optional ;

  feature.compose <squadt-connectivity>implemented
        : <squadt-interface>enabled
          <library>/libraries/utilities//squadt_interface
        ;

  build-options += <threading>multi ;
}
else {
  print-notice "not building squadt support in tools!" ;

  feature.feature squadt-interface : disabled enabled : implicit incidental ;

  feature.compose <squadt-connectivity>implemented
        : <squadt-interface>disabled
        ;
}

include ./build/Jamfile.v2 ;

# Top project
project toolset
       : build-dir $(BUILD_TOP)
       : requirements
          <conditional>@select-configuration
          <define>_FILE_OFFSET_BITS=64
          <dll-path>$(libdir)
          $(build-options)
       : default-build
          <link>$(link-variant)
       : usage-requirements
          <include>./build/workarounds/all
       ;

# Only from the root of the source tree
if [ path.exists ./tools ] {
  if [ is-option enable-experimental : no ] = no {
    print-notice "not building experimental tools!" ;

    feature.compose <status>experimental : <install>no ;
  }
  if [ is-option enable-deprecated : no ] = no {
    print-notice "not building deprecated tools!" ;

    feature.compose <status>deprecated : <install>no ;
  }

  root  = [ path.make $(TOP) ] ;
  tools = [ MATCH $(root)/tools/(.*)/.* : [ glob $(TOP)/tools/*/Jamfile.v2 ] ] ;

  local targets  = [ set.intersection [ MATCH "^([0-9a-zA-Z_]+)$" : [ modules.peek : ARGV ] ] : $(tools) ] ;
  local disabled = [ MATCH "^--disable-tools=([,0-9a-zA-Z_]+)$" : [ modules.peek : ARGV ] ] ;

  if ! $(targets) {
    targets = $(tools) ;
  }
  if $(disabled) {
    targets = [ set.difference $(targets) : [ regex.split "$(disabled)" "," ] ] ;
  }

  # Register tool projects
  for tool in $(targets) {
    # Register tool projects
    use-project /tools/$(tool) : tools/$(tool) ;
  }

  if [ feature.defaults <install> ] != <install>yes {
    # Introduce tool targets
    for tool in $(targets) {
      alias $(tool) : stage ;
    }

    if ! $(tools) in $(targets) {
      ECHO "Building selected tools :" $(targets) ;
    }

    targets = /tools/$(targets)//stage ;

    alias stage : $(targets) : <location>build/stage ;
  }
  else {
    # Add prefix for packaging
    if [ get-option destdir : no ] != no {
      local destdir  = [ get-option destdir : "" ] ;

      prefix     = $(destdir)$(prefix) ;
      bindir     = $(destdir)$(bindir) ;
      libdir     = $(destdir)$(libdir) ;
      includedir = $(destdir)$(includedir) ;
      datadir    = $(destdir)$(datadir) ;
    }

    if ! $(tools) in $(targets) {
      ECHO "Installing selected tools only :" $(targets) ;

      # Introduce tool targets
      for tool in $(targets) {
        alias $(tool) : install ;
      }

      targets = /tools/$(targets)//install /libraries//install-all ;
    }
    else {
      # Complete install
      targets = /tools/$(tools)//install /libraries//install-all install-examples ;

      # General examples
      install install-examples
              : [ path.glob-tree $(TOP)/examples : *.txt *.mcrl2 *.pnml *.mcf *.fsm *.trc project.xml : .svn ]
              : <location>$(datadir)
                <install-source-root>.
              ;
    }

    alias install : $(targets) ;
  }
}

rule install-data ( name : targets * : requirements ) {
  local data-sub-location = [ feature.get-values data-sub-location : $(requirements) ] ;

  if $(data-sub-location) {
    install $(name) : $(targets) : <location>$(datadir)/$(data-sub-location) ;
  }
  else {
    error "missing feature <data-sub-location>directory-name" ;
  }
}

rule install-tools ( executables * : requirements * ) {
  local rule-name   = install ;
  local destination = $(bindir) ;
  local targets ;

  if [ feature.defaults <install> ] != <install>yes {
    rule-name   = stage ;
    destination = $(TOP)/build/stage ;
  }
  else { # install man pages
    targets += $(executables).1 ;
  }

  # OS X bundle installation
  if [ modules.peek : OS ] = MACOSX && $(WX_CPPFLAGS) {
    bundles = [ MATCH (.*).plist : [ glob *.plist ] ] ;

    executables = [ set.difference $(executables) : $(bundles) ] ;

    if $(bundles) {
      targets += $(bundles).app ;
    }
  }

  if $(executables) {
    install install-executables : $(executables) : $(requirements) <install-dependencies>off <install-type>EXE <location>$(destination) ;

    if [ property.select source : $(requirements) ] && [ feature.get-values link : $(build-options) ] != static {
      local plugin-targets = [ feature.get-values source : $(requirements) ] ;

      targets += $(plugin-targets)//$(rule-name) ;
    }

    targets += install-executables ;
  }

  alias $(rule-name) : $(targets) ;

  local c = [ project.current ] ;

  module [ $(c).project-module ] {
    explicit $(rule-name) ;
  }
}

rule install-libraries ( libraries * : requirements * ) {
  local headers = [ glob-tree README *.h *.hpp *.ipp : .svn build* test* source* example* ] ;

  if [ feature.defaults <install> ] = <install>yes {
    # Get install location information
    if ! [ property.select location : $(requirements) ] {
      requirements += <location>$(libdir) ;
    }

    install install-library : $(libraries) : <install-dependencies>on <install-type>LIB $(requirements) ;

    requirements = [ property.change $(requirements) : <location> $(includedir) ] ;

    # Instal header files
    if [ MATCH $(root)/.*(include/mcrl2/.*) : $(headers) ] {
      # filter out headers not in mcrl2 directory
      headers = [ MATCH (.*/include/mcrl2/.*) : $(headers) ] ;

      requirements += <install-source-root>../include/mcrl2 ;
    }
    else {
      headers = [ MATCH (.*/include/$(libraries)/.*) : $(headers) ] ;

      requirements += <install-source-root>../include ;
    }

    install install-headers : [ MATCH $(root)/.*(include/.*) : $(headers) ] : $(requirements) ;

    alias install : install-headers install-library ;
  }
  else {
    install stage : $(libraries) : <location>$(TOP)/build/stage ;
  }

  local c = [ project.current ] ;

  module [ $(c).project-module ] {
    explicit stage install install-library ;
  }
}

# For plugins (dynamic linked libraries)
rule plugin ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  local make_alias = false ;

  if [ feature.get-values link : $(build-options) ] = static {
    make_alias = true ;
  }
  if [ property.select opengl : $(requirements) ] {
    if [ feature.get-values opengl : $(requirements) ] = yes {
      if ! $(OPENGL_NAME) {
        make_alias = true ;
      }
      else {
        requirements += <library>/site-config//opengl ;
      }
    }
  }
  if [ property.select wx : $(requirements) ] {
    if [ feature.get-values wx : $(requirements) ] = yes {
      if ! $(WX_CPPFLAGS) {
        make_alias = true ;
      }
    }
  }

  requirements = [ property.remove opengl status wx : $(requirements) ] ;

  if $(make_alias) = true {
    alias $(name) ;

    # For incomplete builds (for instance without wxWidgets dependent tools)
    alias install ;
    alias stage ;
  }
  else {
    lib $(name) : $(sources) : $(requirements) <link>shared <toolset>darwin:<bundle>yes : $(defaults) : $(usage-requirements) ;

    if [ feature.defaults <install> ] = <install>yes {
      install install : $(name) : <location>$(plugindir) ;
    }
    else {
      install stage : $(name) : <location>$(plugindir) ;
    }
  }
}

# Target for a tool in the mcrl2 toolset
rule tool ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  local make_alias = false ;
  local additional-requirements = <define>PREFIX=\"\\\"$(install-prefix)\\\"\"
                                  <define>PLUGINDIR=\"\\\"$(plugindir)\\\"\"
                                  <define>MCRL2_REVISION=\"\\\"$(BUILD_TAG)\\\"\" ;

  if [ property.select status : $(requirements) ] {
    # do not install if the expanded property set contains <install>
    if [ property.select install : [ feature.expand [ property.select status : $(requirements) ] ] ] {
      make_alias = true ;
    }
  }
  if [ property.select opengl : $(requirements) ] {
    if [ feature.get-values opengl : $(requirements) ] = yes {
      if ! $(OPENGL_NAME) {
        make_alias = true ;
      }
      else {
        requirements += <library>/site-config//opengl ;
      }
    }
  }
  if [ property.select wx : $(requirements) ] {
    if [ feature.get-values wx : $(requirements) ] = yes {
      if ! $(WX_CPPFLAGS) {
        make_alias = true ;
      }
    }

    additional-requirements += <toolset>darwin:<linkflags>"-undefined dynamic_lookup" 
                               <os>NT,<toolset>gcc:<linkflags>"-Wl,-subsystem:windows -mwindows"
                               <os>CYGWIN:<linkflags>"-Wl,-subsystem:windows -mwindows" ;
  }

  requirements = [ property.remove opengl status wx : $(requirements) ] ;

  if $(make_alias) = true {
    alias $(name) ;
    alias $(name).1 ;
  }
  else {
    exe $(name) : $(sources) : $(requirements) $(additional-requirements) : $(defaults) : $(usage-requirements) ;

    if [ feature.defaults <install> ] = <install>yes {
      man $(name).1 : $(name) : <dependency>/libraries//install-all <location>$(mandir)/man1 ;
    }
  }

  # Mac application bundle
  if [ modules.peek : OS ] = MACOSX {
    bundle = [ MATCH (.*).plist : [ glob $(name).plist ] ] ;

    if $(bundle) {
      if $(make_alias) = true {
        alias $(name).app ;
      }
      else {
        # Create bundle targets
        mac-bundle $(bundle).app
             : $(bundle)
               $(bundle).plist
               $(bundle).icns
             : <location>$(prefix)
             ;
      }
    }
  }
}

# Target for a library that is part of the big mcrl2 library when link=shared
rule mcrl2-library ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  alias headers : : [ property.select use include : $(requirements) ]
                : : [ property.select use include : $(usage-requirements) ] ;

  if $(sources) {
    if $(link-variant) != static {
      local external = [ feature.get-values library : $(requirements) $(usage-requirements) ] ;

      external = [ set.difference $(external) : [ MATCH (/libraries/.*) : $(external) ] ] ;

      # build target for inclusion by mcrl2 library
      alias $(name).alias : $(sources) : <link>shared $(requirements) : $(defaults) :
                      [ property.change $(usage-requirements) : <library> ]
                      <library>$(external)
                      ;

      # shared library target
      alias $(name) : /libraries//mcrl2 : <link>shared : : <use>headers ;
    }
    else {
      # static library target
      lib $(name) : $(sources) : <link>static $(requirements) : $(defaults) : $(requirements) $(usage-requirements) ;

      alias $(name).alias : : <link>static ;
    }
  }
  else {
    alias $(name) : : <link>static : : $(usage-requirements) ;
    alias $(name).alias : : <link>static ;
  }

  install-libraries $(name) ;

  local c = [ project.current ] ;

  module [ $(c).project-module ] {
    explicit $(name).alias $(name) headers ;
  }
}
