# Author: Jeroen van der Wulp
#
#  Copyright (C) 2008 Eindhoven University of Technology.
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)
#
# Main build description containing custom rules to make project descriptions more compact.
#
#  Options:
#
#   Build:
#
#    --enable-debug                 sets: debug-symbols=on runtime-debugging=on
#
#    --enable-profile               sets: profiling=on
#
#    --enable-optimisation          sets: optimization=speed inlining=full
#
#    --disable-squadt-support       disables squadt support in tools
#
#    --enable-experimental          activates building/installing of tools that are marked experimental
#
#    --enable-deprecated            activates building/installing of tools that are marked deprecated
#
#    --no-display-notice            configuration notice message are not printed
#
#    --install-boost-headers        installs the Boost header files (temporary measure until Boost 1.35 has become mainstream)
#
#   Installation:
#
#    --prefix                       directory relative to which tools/libraries, documentation and examples
#                                   are installed, unless one of the following options is also specified
#
#                                   Note: always do a clean build after changing the prefix!
#
#    --bindir                       directory where binaries are installed
#
#    --libdir                       directory where libraries are installed
#
#    --includedir                   directory where header files are installed
#
#    --datadir                      directory where data is installed
#
#    --mandir                       directory where man pages are installed
#
#    --destdir                      direcory that is prepended to all of the above paths for installation,
#                                   the built takes place as-if everything would be installed according to
#                                   be above arguments (for binary packaging)
#

import feature ;
import path ;
import property ;
import regex ;
import set ;
import testing ;

import build/man ;
import build/install ;

if [ modules.peek : OS ] = MACOSX {
  import build/macosx/mac-bundle ;
}

# Constants for commonly used paths
path-constant TOP : . ;

# Activate header cache
modules.poke : HCACHEFILE : $(TOP)/build/bin/.jamdeps ;

load-configuration $(TOP)/build config.jam ;

# Some sub projects
use-project /site-config : build ;
use-project /libraries   : libraries ;

# Register individual library projects
libraries = [ MATCH (.*)/build/Jamfile.v2 : [ glob-tree Jamfile.v2 : .svn ] ] ;

for library in [ MATCH (.*libraries/[^//]*)$ : $(libraries) ]
               [ MATCH (.*3rd-party/[^//]*)$ : $(libraries) ] {
  local name = [ MATCH .*/([^//]*)$ : $(library) ] ;

  use-project /libraries/$(name) : $(library)/build ;
}

constant      INSTALL_ROOT : [ get-install-root ] ;
constant      PLUGIN_ROOT  : [ get-plugin-root ] ;
constant      BUILD_TAG    : [ get-build-tag ] ;
path-constant BOOST_ROOT   : [ get-boost-path ] ;  # Boost prefix

# Top project
project toolset
       : build-dir build/bin
       : requirements
          <conditional>@build/install.platform-configuration
          <define>_FILE_OFFSET_BITS=64
          <include>./build/workarounds
          [ build/install.feature-configuration ]
       : default-build
          <variant>debug
          [ build/install.default-configuration ]
       ;


# Only from the root of the source tree
if [ path.exists ./tools ] {
  tools = [ MATCH .*/?tools/(.*)/.* : [ glob tools/*/Jamfile.v2 ] ] ;

  local targets  = [ set.intersection [ MATCH "^([0-9a-zA-Z_]+)$" : [ modules.peek : ARGV ] ] : $(tools) ] ;
  local disabled = [ MATCH "^--disable-tools=([,0-9a-zA-Z_]+)$" : [ modules.peek : ARGV ] ] ;

  if ! $(targets) {
    targets = $(tools) ;
  }
  if $(disabled) {
    targets = [ set.difference $(targets) : [ regex.split "$(disabled)" "," ] ] ;
  }

  # Register tool projects
  for tool in $(targets) {
    # Register tool projects
    use-project /tools/$(tool) : tools/$(tool) ;
  }

  if [ feature.defaults <install> ] != <install>yes {
    # Introduce tool targets
    for tool in $(targets) {
      alias $(tool) : /tools/$(targets)//install : <location>build/stage ;
    }

    if ! $(tools) in $(targets) {
      ECHO "Building selected tools :" $(targets) ;
    }
  }
  else {
    if ! $(tools) in $(targets) {
      ECHO "Installing selected tools only :" $(targets) ;

      # Introduce tool targets
      for tool in $(targets) {
        alias $(tool) : /tools/$(targets)//install : <link>shared:<source>/libraries//install/<link>shared ;
      }

      alias install : $(targets) ;
    }
    else {
      local boost-headers = [ MATCH --(install-boost-headers) : [ modules.peek : ARGV ] ] ;

      # Complete install
      alias install : /tools/$(tools)//install /libraries//install examples $(boost-headers) ;

      if $(boost-headers) { 
        local all-boost-headers = [ MATCH (3rd-party/boost/boost/.*)$ : [ glob-tree *.hpp *.ipp : .svn ] ] ;
        local header-location   = [ path.join [ get-install-root ] "include" ] ;

        install install-boost-headers : [ set.difference $(all-boost-headers) :
          [ MATCH (.*asio.*)|(.*xpressive.*)|(.*filesystem.*)|(.*test.*)|(.*thread.*)|(.*signal.*)|(.*program_options.*)|(.*aux_/preprocessed/.*) : $(all-boost-headers) ] ]
                : <location>$(header-location) <install-type>H <install-source-root>3rd-party/boost ;

        explicit install-boost-headers ;
      }

      # General examples
      install-data examples
              : [ path.glob-tree $(TOP)/examples : *.txt *.mcrl2 *.pnml *.mcf *.fsm *.trc project.xml : .svn ]
              : <install-source-root>./examples
                <data-sub-location>examples
              ;
    }
  }
}


# For plugins (dynamic linked libraries)
rule plugin ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  requirements = [ process-requirements $(requirements) ] ;

  if ! <build>no in $(requirements) {
    lib $(name) : $(sources) : $(requirements) <link>shared <toolset>darwin:<bundle>yes : $(defaults) : $(usage-requirements) ;
  }
  else {
    alias $(name) ;
  }
}

# Target for a tool in the mCRL2 toolset
rule tool ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  build-requirements = <define>MCRL2_REVISION=\"\\\"$(BUILD_TAG)\\\"\"
                                [ process-requirements $(requirements) ] ;

  if ! <build>no in $(build-requirements) {
    exe $(name) : $(sources)
                : $(build-requirements)
                  <library>/libraries/utilities//command_line_interfacing
                : $(defaults) : $(usage-requirements) ;

    # generate install targets
    install-tool $(name) : $(requirements) ;
  }
  else {
    install-tool $(name) : $(build-requirements) ;
  }
}
