path-constant TOP             : . ;
path-constant BUILD_TOOLS     : ./build/boost_build.v2 ; # Common build directory
path-constant BUILD_TOP       : ./build/bin ;            # Common build directory
path-constant BOOST_ROOT      : ./3rd-party/boost ;      # Boost prefix (packaged sources)
path-constant SETUP           : ./src ;                  # Header file for run-time configuration

# Activate header cache
modules.poke : HCACHEFILE : $(BUILD_TOP)/.jamdeps ;

# The known sub projects
use-project /site-config               : build ;
use-project /boost                     : 3rd-party/boost ;
use-project /libraries                 : src/libraries ;
use-project /libraries/sip             : src/squadt/libraries/sip/build ;
use-project /libraries/utilities       : src/squadt/libraries/utilities/build ;
use-project /workarounds               : build/workarounds ;

include $(BUILD_TOOLS)/building.jam ;

project toolset
       : build-dir $(BUILD_TOP)
       : requirements
          <define>_FILE_OFFSET_BITS=64
          <define>REVISION=\\\"$(REVISION)-$(BUILD_VARIANT)-$(LINK_VARIANT)\\\"
          <use>/workarounds//configuration
       : default-build
          <address-model>$(ADDRESS_MODEL)
          <variant>$(BUILD_VARIANT)
          $(OPTIMISATIONS)
          <link>$(LINK_VARIANT)
          $(BUILD_OPTIONS)
       ;

include $(BUILD_TOOLS)/installing.jam ;

import path ;

root  = [ path.make $(TOP) ] ; 
tools = [ MATCH $(root)/src/(.*)/.* : [ glob $(TOP)/src/*/Jamfile.v2 ] ] ;

# Register tool projects
for tool in $(tools) {
  use-project /tools/$(tool) : src/$(tool) ;
}

import set ;
import regex ;

local targets  = [ set.intersection [ MATCH "^([0-9a-zA-Z]+)$" : [ modules.peek : ARGV ] ] : $(tools) ] ;
local disabled = [ MATCH "^--disable-tools=([,0-9a-zA-Z]+)$" : [ modules.peek : ARGV ] ] ;

if ! $(targets) {
  targets = $(tools) ;
}
if $(disabled) {
  targets = [ set.difference $(targets) : [ regex.split "$(disabled)" "," ] ] ;
}

# Install when requested
if ! install in [ MATCH "^-?-?(install)" : [ modules.peek : ARGV ] ] {

  if $(targets) {
    for tool in $(targets) {
      alias $(tool)
            : build
            ;
    }
   
    targets = /tools/$(targets) ;
  }
  else {
    targets += build-plugins ;
  }

  stage build
          : $(targets)
          : <location>$(BUILD_TOP)/tools
            <install-type>EXE
            <hardcode-dll-paths>true
          ;

  stage build-plugins
          : $(plugins)
          : <location>$(BUILD_TOP)/plugins
            <install-type>SHARED_LIB
          ;
}
else {
  feature.set-default install : yes ;

  if $(targets) {
    for tool in $(targets) {
      alias $(tool)
            : install
            ;
    }
   
    alias install
            : /tools/$(targets)//install
              install-shared-libraries
            ;

    targets = /tools/$(targets) ;
  }
  else {
    # Complete install
    alias install
            : /tools/$(targets)//install
              install-shared-libraries
              install-examples
              install-headers
            : <os>MACOSX:<source>install-mac-bundles
            ;

    targets = /tools/$(tools) ;
  }

  # General examples
  stage install-examples
          : [ path.glob-tree $(TOP)/examples : *.txt *.mcrl2 *.pnml *.mcf *.fsm *.trc : .svn ]
          : <location>$(DATA_DIR)
            <install-source-root>.
          ;

  stage install-headers
          : /libraries/aterm//headers
          : <location>$(INCLUDE_DIR)/aterm
            <install-source-root>3rd-party/aterm/include
          ;

#  stage install-static-libraries
#          : $(targets)
#          : <location>$(LIB_DIR)
#            <install-dependencies>on <install-type>STATIC_LIB
#          ;

  stage install-shared-libraries
          : $(targets)
          : <location>$(LIB_DIR)
            <dll-path>$(LIB_DIR)
            <install-dependencies>on <install-type>SHARED_LIB
          ;

  stage install-shared-libraries
          : $(targets)
          : <location>$(BIN_DIR)
            <os>NT
            <dll-path>$(BIN_DIR)
            <install-dependencies>on <install-type>SHARED_LIB
          ;

  stage install-shared-libraries
          : $(targets)
          : <location>$(BIN_DIR)
            <os>CYGWIN
            <dll-path>$(BIN_DIR)
            <install-dependencies>on <install-type>SHARED_LIB
          ;
}
