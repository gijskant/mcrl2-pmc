// Date: 08-12-2004
// This document describes the output format of the GenSpect language. Here:
// - <NumberString> represents a string of the format '"0"|("-"?[1-9][0-9]*)'
// - <String> represents an arbitrary string
// - the other alphabetical strings within angular brackets are non-terminals
//   that represent all possible branches of their productions
// - for non-terminal N, N*/N+ represents an ATermList with zero/one or more N's
// - each c(a_0, ..., a_n), where c is an alphabetical string, represents an
//   ATermAppl with c as its unquoted head and a_0, ..., a_n as its arguments

// This description uses the theory of higher-order abstract data types, i.e.
// we have a higher-order signature Sigma = (B, O), where B is set of basic
// sorts and O is a set of operations. From the set B, we can generate the set
// of higher-order sorts as follows:
// - the set of basic sorts B is in B->;
// - for all s_0, ..., s_n, s in B->, (s_0 # ... # s_n -> s) is in B->.
// The set O is a B->-sorted set of operations, where each O_s contains
// constants of sort s, for all s in B->.
// The higher-order signature Sigma determines a first-order signature
// Sigma-> = (B->, O extended with Appl), where Appl is the set of operation
// applications.  This set contains the operation apply: (w -> s) # w -> s for
// every w,s in B-> where w = s_0, ..., s_n.
// Because we modelled the set Appl by the data expression DataAppl, the
// description of the data types below is essentially first-order. Also, we
// only use finite subsets of the infinite set of sorts B-> and the infinite
// set of operations O.

//Specification
//-------------

//specification
<Spec>        ::= SpecV1(SortSpec(<SortDecl>*), ConsSpec(<OpDecl>*),
                    MapSpec(<OpDecl>*), EqnSpec(<EqnSect>*),
                    ActSpec(<ActDecl>*), ProcSpec(<ProcDecl>*), Init(<ProcExpr>)
                  )

//sort declaration
<SortDecl>    ::= SortDeclStandard(<String>)
                | SortDeclRef(<String>, <SortExpr>)

//operation declaration
<OpDecl>      ::= OpDecl(<String>, <SortExpr>)

//equation section
<EqnSect>     ::= EqnSect(<DataVarDecl>*, <EqnDecl>+) 

//data variable declaration
<DataVarDecl> ::= DataVarDecl(<String>, <SortExpr>)

//equation declaration
<EqnDecl>     ::= EqnDecl(<DataExpr>, <DataExpr>) 

//action declaration
<ActDecl>     ::= ActDecl(<String>, <SortExpr>*)

//process declaration
<ProcDecl>    ::= ProcDecl(<String>, <DataVarDecl>*, <ProcExpr>)

//Expressions
//-----------

//sort expression
<SortExpr>    ::= SortId(<String>)
                | SortBool
                | SortPos
                | SortNat
                | SortInt
                | SortList(<SortExpr>)
                | SortSet(<SortExpr>)
                | SortBag(<SortExpr>)
                | SortArrow(<SortExpr>+, <SortExpr>)
                | SortStruct(<StructCons>+)                               (- dr)

//constructor declaration of a structured sort
<StructCons>  ::= StructCons(<String>, <StructProj>*, <StringOrNil>)      (- dr)

//projection declaration of a structured sort
<StructProj>  ::= StructProj(<StringOrNil>, <SortExpr>+)                  (- dr)

//string or nil
<StringOrNil> ::= <String>
                | Nil

//data expression
<DataExpr>    ::= DataVarOpId(<String>)                                   (- tc)
                | DataVar(<String>, <SortExprOrUnknown>)                  (+ tc)
                | OpId(<String>, <SortExprOrUnknown>)                     (+ tc)
                | DataAppl(<DataExpr>, <DataExpr>+) 
                | Number(<NumberString>, <SortExprOrUnknown>)             (- dr)
                | ListEnum(<DataExpr>+, <SortExprOrUnknown>)              (- dr)
                | SetEnum(<DataExpr>+, <SortExprOrUnknown>)               (- dr)
                | BagEnum(<BagEnumElt>+, <SortExprOrUnknown>)             (- dr)
                | SetBagComp(<DataVarDecl>, <DataExpr>)                   (- dr)
                | Forall(<DataVarDecl>+, <DataExpr>)                      (- dr)
                | Exists(<DataVarDecl>+, <DataExpr>)                      (- dr)
                | Lambda(<DataVarDecl>+, <DataExpr>)                      (- dr)
                | Whr(<DataExpr>, <WhrDecl>+)                             (- dr)

//sort expression or unknown
<SortExprOrUnknown>
              ::= <SortExpr> 
                | Unknown                                                 (- tc)

//bag enumeration element
<BagEnumElt>  ::= BagEnumElt(<DataExpr>, <DataExpr>) 

//where clause declaration
<WhrDecl>     ::= WhrDecl(<String>, <DataExpr>)

//process expression
<ProcExpr>    ::= ActProcRef(<String>, <DataExpr>*)                       (- tc)
                | Act(ActId(<String>, <SortExprOrUnknown>*, <DataExpr>*)  (+ tc)
                | ProcRef(ProcId(<String>), <DataExpr>*)                  (+ tc)
                | Delta
                | Tau 
                | Sum(<DataVarDecl>+, <ProcExpr>) 
                | Restrict(<MultActName>*, <ProcExpr>)
                | Allow(<MultActName>*, <ProcExpr>)
                | Hide(<MultActName>*, <ProcExpr>)
                | Ren(<RenExpr>*, <ProcExpr>)
                | Comm(<CommExpr>*, <ProcExpr>)
                | Sync(<ProcExpr>, <ProcExpr>)
                | AtTime(<ProcExpr>, <DataExpr>)
                | Seq(<ProcExpr>, <ProcExpr>)
                | Cond(<DataExpr>, <ProcExpr>, <ProcExpr>) 
                | BInit(<ProcExpr>, <ProcExpr>)
                | Merge(<ProcExpr>, <ProcExpr>)
                | LMerge(<ProcExpr>, <ProcExpr>)
                | Choice(<ProcExpr>, <ProcExpr>)

//multiaction identifier
<MultActName> ::= MultActName(<String>+) 

//renaming expression
<RenExpr>     ::= RenExpr(<String>, <String>) 

//communication expression
<CommExpr>    ::= CommExpr(<MultActName>, <StringOrNil>) 
