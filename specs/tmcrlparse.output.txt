// Date: 08-12-2004
// This document describes the internal format of the MuCRL language similar
// to GenSpect language. Here:
// - <String> represents an arbitrary string
// - the other alphabetical strings within angular brackets are non-terminals
//   that represent all possible branches of their productions
// - for non-terminal N, N*/N+ represents an ATermList with zero/one or more N's
// - each c(a_0, ..., a_n), where c is an alphabetical string, represents an
//   ATermAppl with c as its unquoted head and a_0, ..., a_n as its arguments

//Specification
//-------------

//specification
<Spec>        ::= SpecMuCRL(SortSpec(<SortDecl>*), FuncSpec(<OpDecl>*),
                    MapSpec(<OpDecl>*), EqnSpec(<EqnSect>*),
                    ActSpec(<ActDecl>*), CommSpec(<CommDecl>*), 
                    ProcSpec(<ProcDecl>*), Init(<ProcExpr>)
                  )

//sort declaration
<SortDecl>    ::= SortDeclStandard(SortId(<String>))

//operation declaration
<OpDecl>      ::= OpDecl(<String>, <SortExpr>)

//equation section
<EqnSect>     ::= EqnSect(<DataVarDecl>*, <EqnDecl>+) 

//data variable declaration
<DataVarDecl> ::= DataVarDecl(<String>, <SortExpr>)

//equation declaration
<EqnDecl>     ::= EqnDecl(<DataExpr>, <DataExpr>) 

//action declaration
<ActDecl>     ::= ActDecl(<String>, SortId(<String>)*)

//comm declaration
<CommDecl>    ::= CommDecl(<String>,<String>,<String>) 

//process declaration
<ProcDecl>    ::= ProcDecl(<String>, <DataVarDecl>*, <ProcExpr>)

//Expressions
//-----------

//sort expression
<SortExpr>    ::= SortId(<String>)
                | SortArrow(<SortExpr>+, <SortExpr>)

//string or nil
<StringOrNil> ::= <String>
                | Nil

//data expression
<DataExpr>    ::= DataVarOpId(<String>)                                   (- tc)
                | DataVar(<String>, <SortExprOrUnknown>)                  (+ tc)
                | OpId(<String>, <SortExprOrUnknown>)                     (+ tc)
                | DataAppl(<DataExpr>, <DataExpr>+) 

//sort expression or unknown
<SortExprOrUnknown>
              ::= <SortExpr> 
                | Unknown                                                 (- tc)

//process expression
<ProcExpr>    ::= ActProcRef(<String>, <DataExpr>*)                       (- tc)
                | Act(ActId(<String>, <SortExprOrUnknown>*, <DataExpr>*)  (+ tc)
                | ProcRef(ProcId(<String>), <DataExpr>*)                  (+ tc)
                | Delta
                | Tau 
                | Sum(<DataVarDecl>+, <ProcExpr>) 
                | Encap(<String>*, <ProcExpr>)
                | Hide(<String>*, <ProcExpr>)
                | Ren(<RenExpr>*, <ProcExpr>)
                | Sync(<ProcExpr>, <ProcExpr>)
                | AtTime(<ProcExpr>, <DataExpr>)
                | Seq(<ProcExpr>, <ProcExpr>)
                | Cond(<DataExpr>, <ProcExpr>, <ProcExpr>) 
                | BInit(<ProcExpr>, <ProcExpr>)
                | Merge(<ProcExpr>, <ProcExpr>)
                | LMerge(<ProcExpr>, <ProcExpr>)
                | Choice(<ProcExpr>, <ProcExpr>)

//renaming expression
<RenExpr>     ::= RenExpr(<String>, <String>) 

