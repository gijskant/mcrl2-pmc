//--------------------------------------------------------------------//
// This document describes the ATerm format of GenSpect specifications.
// Here:
// - <IdString> represents a string of the format '[a-zA-Z_][a-zA-Z0-9_]*';
// - <NumberString> represents a string of the format '"0"|("-"?[1-9][0-9]*) ';
// - <A>* represents an ATermList with zero or more <A>'s;
// - <A>+ represents an ATermList with one or more <A>'s.
//--------------------------------------------------------------------//

//identifier
<Id>             ::= Id(<IdString>) 

//number
<Number>         ::= Number(<NumberString>) 

//multiaction identifier
<MAId>           ::= MAId(<Id>+) 

//communication expression
<CommExpr>       ::= CommExpr(<MAId>, <IdOrTau>) 

//id or tau
<IdOrTau>        ::= <Id>
                   | Tau() 

//renaming expression
<RenExpr>        ::= RenExpr(<Id>, <Id>) 

//domain
<Domain>         ::= Dom(<SortExpr>+) 

//constructor declaration of a structured sort declaration
<StructDeclCons> ::= StructDeclCons(<Id>, <ProjDecl>*, <IdOrNil>) 

//projection declaration of a structured sort declaration
<StructDeclProj> ::= StructDeclProj(<IdOrNil>, <Domain>) 

//id or nil
<IdOrNil>        ::= <Id>
                   | Nil() 

//identifier declaration
<IdDecl>         ::= IdDecl(<Id>, <SortExpr>) 

//declaration of one or more identifiers of the same sort
<IdDecls>        ::= IdsDecl(<Id>+, <SortExpr>) 

//bag enumeration element
<BagEnumElt>     ::= BagEnumElt(<DataExpr>, <DataExpr>) 

//sort expression
<SortExpr>       ::= SortBool() 
                   | SortPos() 
                   | SortNat() 
                   | SortInt() 
                   | SortList(<SortExpr>) 
                   | SortSet(<SortExpr>) 
                   | SortBag(<SortExpr>) 
                   | SortRef(<Id>) 
                   | SortArrow(<Domain>, <SortExpr>) 

//data expression
<DataExpr>       ::= <Id>
                   | <Number>
                   | True() 
                   | False() 
                   | EmptyList() 
                   | EmptySetBag() 
                   | ListEnum(<DataExpr>+) 
                   | SetEnum(<DataExpr>+) 
                   | BagEnum(BagEnumElt+) 
                   | SetBagComp(<IdDecl>, <DataExpr>) 
                   | FuncApp(<DataExpr>, <DataExpr>*) 
                   | NotOrCompl(<DataExpr>) 
                   | Neg(<DataExpr>) 
                   | Size(<DataExpr>) 
                   | Forall(<IdDecl>, <DataExpr>) 
                   | Exists(<IdDecl>, <DataExpr>) 
                   | ListAt(<DataExpr>, <DataExpr>) 
                   | MultOrIntersect(<DataExpr>, <DataExpr>) 
                   | Div(<DataExpr>, <DataExpr>) 
                   | Mod(<DataExpr>, <DataExpr>) 
                   | AddOrUnion(<DataExpr>, <DataExpr>) 
                   | SubtOrDiff(<DataExpr>, <DataExpr>) 
                   | LTOrPropSubset(<DataExpr>, <DataExpr>) 
                   | GT(<DataExpr>, <DataExpr>) 
                   | LTEOrSubset(<DataExpr>, <DataExpr>) 
                   | GTE(<DataExpr>, <DataExpr>) 
                   | In(<DataExpr>, <DataExpr>) 
                   | Cons(<DataExpr>, <DataExpr>) 
                   | Snoc(<DataExpr>, <DataExpr>) 
                   | Concat(<DataExpr>, <DataExpr>) 
                   | Eq(<DataExpr>, <DataExpr>) 
                   | Neq(<DataExpr>, <DataExpr>) 
                   | And(<DataExpr>, <DataExpr>) 
                   | Or(<DataExpr>, <DataExpr>) 
                   | Imp(<DataExpr>, <DataExpr>) 
                   | Lambda(<IdDecl>, <DataExpr>) 
                   | Whr(<DataExpr>+) 

//process expression
<ProcExpr>       ::= ActProcRef(<Id>, <DataExpr>*) 
                   | Delta() 
                   | Tau() 
                   | Sum(<IdDecl>, <ProcExpr>) 
                   | Restrict(<MAId>*, <ProcExpr>) 
                   | Allow(<MAId>*, <ProcExpr>) 
                   | Hide(<MAId>*, <ProcExpr>) 
                   | Ren(<RenExpr>*, <ProcExpr>) 
                   | Comm(<CommExpr>*, <ProcExpr>) 
                   | Sync(<ProcExpr>, <ProcExpr>) 
                   | AtTime(<ProcExpr>, <DataExpr>) 
                   | Seq(<ProcExpr>, <ProcExpr>) 
                   | Cond(<DataExpr>, <ProcExpr>) 
                   | BInit(<ProcExpr>, <ProcExpr>) 
                   | Merge(<ProcExpr>, <ProcExpr>) 
                   | LMerge(<ProcExpr>, <ProcExpr>) 
                   | Choice(<ProcExpr>, <ProcExpr>) 

//sort specification
<SortSpec>       ::= SortSpec(<SortDecl>+) 

//sort declaration
<SortDecl>       ::= SortDeclStandard(<Id>+) 
                   | SortDeclRef(<Id>+, <SortExpr>) 
                   | SortDeclStruct(<Id>, <ConstrDecl>+) 

//operation specification
<OpSpec>         ::= ConsSpec(<OpDecl>+) 
                   | MapSpec(<OpDecl>+) 

//operation declaration
<OpDecl>         ::= <IdDecls>

//equation specification
<EqnSpec>        ::= EqnSpec(<EqnVar>*, <EqnDecl>+) 

//equation variable
<EqnVar>         ::= <IdDecls>

//equation declaration
<EqnDecl>        ::= EqnDecl(<DataExpr>, <DataExpr>) 

//action specification
<ActSpec>        ::= ActSpec(<ActDecl>+) 

//action declaration
<ActDecl>        ::= ActDecl(<Id>+, <DomainOrNil>) 

//domain or nil
<DomainOrNil>    ::= <Domain>
                   | Nil() 

//process specification
<ProcSpec>       ::= ProcSpec(<ProcDecl>+) 

//process declaration
<ProcDecl>       ::= ProcDecl(<Id>, <ProcVar>*, <ProcExpr>) 

//process variable
<ProcVar>        ::= <IdDecls>

//initialisation
<Init>           ::= Init(<ProcExpr>) 

//specification element
<SpecElt>        ::= <SortSpec> 
                   | <OpSpec>
                   | <EqnSpec>
                   | <ActSpec>
                   | <ProcSpec>
                   | <Init>

//specification
<Spec>           ::= Spec(<SpecElt>+) 

