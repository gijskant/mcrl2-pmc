% This is the dining philosophers problem
% Variable K indicates the number of philosophers (and forks)
%
% Note: When changing the value of K, change the KForkPhil process accordingly!

map K: Pos;
eqn K = 2;

act  get,put,up,down,lock,free: Nat;

proc Phil(n:Nat) = get(n).get((n+1) mod K).put(n).put((n+1) mod K).Phil(n);

proc Fork(n:Nat) =  up(n).down(n).Fork(n);

proc ForkPhil(n:Nat) = Fork(n) || Phil(n);

proc KForkPhil =
       % ForkPhil(0) || ... || ForkPhil(K-1);
       ForkPhil(0) || ForkPhil(1);

init
    allow( { lock, free },
    comm( { get|up->lock, put|down->free },
      KForkPhil
    ));
