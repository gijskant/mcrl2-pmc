sort  State = struct STANDBY | STOP | STARTUP | UP | DOWN | SYNC;

cons  N: Pos;
eqn   N = 3;

map   S: Nat -> Nat;
      P: Nat -> Nat;
var   n: Nat;
eqn   S(n) = n mod N + 1;
      P(n) = (n+2*N-2) mod N + 1;

map   remove: Nat # List(Nat) -> List(Nat);
      inl: Nat # List(Nat) -> Bool;
var   n,n':Nat;
      l:List(Nat);
eqn   remove(n,[]) = [];
      n == n' -> remove(n,n'|>l) = remove(n,l);
      n != n' -> remove(n,n'|>l) = n'|>remove(n,l);
      inl(n,[]) = false;
      n == n' -> inl(n,n'|>l) = true;
      n != n' -> inl(n,n'|>l) = inl(n,l);

map   Addresses:      List(Nat) # Nat	    -> List(Nat);
      Addresses_up:   List(Nat) # Nat # Nat -> List(Nat);
      Addresses_down: List(Nat) # Nat # Nat -> List(Nat);
var   a,a': Nat;
      A,A': List(Nat);
      b: Bool;
eqn   Addresses(A,a) = Addresses_up(A,a,a) ++ Addresses_down(A,a,a);
      (inl(a,A) && a' == S(a)) -> Addresses_up(A,a,a') = [ S(a) ];
      (inl(a,A) && a' != S(a)) -> Addresses_up(A,a,a') = S(a) |> Addresses_up(A,S(a),a');
      !(inl(a,A)) -> Addresses_up(A,a,a') = [];
      (inl(a,A) && a' == P(a)) -> Addresses_down(A,a,a') = [ P(a) ];
      (inl(a,A) && a' != P(a)) -> Addresses_down(A,a,a') = P(a) |> Addresses_down(A,P(a),a');
      !(inl(a,A)) -> Addresses_down(A,a,a') = [];

sort  Message = struct mes(address:Nat,state:State);

act   r_stob,s_stob,c_stob: Message # Nat;
      r_btos,s_btos,c_btos: Message # Nat;
      r_open_relay ,s_open_relay ,c_open_relay : Nat;
      r_close_relay,s_close_relay,c_close_relay: Nat;
      protocol_error: Nat;
      setref,up,down,released: Nat;
      move: Nat # State;

proc  Bus(R:List(Nat)) =
	sum m:Message,a:Nat . 
	  r_stob(m,a). 
	  ( (Addresses(R,a) == []) -> Bus(R) , Deliver(m,R,Addresses(R,a)) )
	+
	sum a:Nat .
	  ( r_open_relay(a).Bus(remove(a,R)) + r_close_relay(a).Bus(a |> R) );

proc  Deliver(m:Message, R:List(Nat), A:List(Nat) ) =
	sum a:Nat .
	(
	  s_btos(m,a).
	  ( (inl(a,A)) -> 
	      ( (remove(a,A) == []) -> Bus(R) , Deliver(m,R,remove(a,A)) ) )
	  +
	  r_open_relay(a).Deliver(m,remove(a,R),A)
	  +
	  r_close_relay(a).Deliver(m,a|>R,A)
	);

proc  Lift0(n:Nat) =
	setref(n).s_close_relay(n).s_stob(mes(1,STARTUP),n).s_open_relay(n).
	( sum m:Message . 
	    r_btos(m,n).
	    ( (state(m) == STARTUP) ->
		s_stob(mes(1,SYNC),n).s_stob(mes(1,STANDBY),n).Lift2(n,1,address(m),STANDBY)
	      , protocol_error(n).Lift2(n,1,1,STOP)
	    )
	)
	+
	sum m:Message . 
	  r_btos(m,n).
	  ( (state(m) == STARTUP) ->
	      s_close_relay(n).s_stob(mes(S(address(m)),STARTUP),n).
	      Lift1(n,S(address(m)),S(address(m)))
	    , protocol_error(n).Lift2(n,1,1,STOP)
	  );

proc  Lift1(n:Nat,m:Nat,nos:Nat) =
	sum mes:Message . 
          r_btos(mes,n).
	  ( (state(mes) == STARTUP) -> Lift1(n,m,address(mes))
	  , ( (state(mes) == SYNC) -> Lift2(n,m,nos,STANDBY)
	    , protocol_error(n).Lift2(n,m,1,STOP) 
	    )
	  );

proc  Lift2(n:Nat,m:Nat,nos:Nat,s:State) =
	(s == STANDBY) ->
	  ( 
	    up(n).Lift3(n,m,nos,UP,nos)
	    +
	    down(n).Lift3(n,m,nos,DOWN,nos)
	  )
	+
	sum msg:Message .
	  r_btos(msg,n).
	  ( (state(msg) == SYNC) -> move(n,s).Lift2(n,m,nos,s)
	  , ( (address(msg) == P(m)) ->
		s_stob(mes(m,state(msg)),n).Lift2(n,m,nos,state(msg))
	    , Lift2(n,m,nos,state(msg))
	    )
	  );
	  
proc  Lift3(n:Nat,m:Nat,nos:Nat,s:State,count:Nat) =
	released(n).Lift2(n,m,nos,STANDBY)
	+
	sum msg:Message.
	  r_btos(msg,n).
	  ( (state(msg) == SYNC) -> move(n,s).Lift3(n,m,nos,s,count)
	  , ( (address(msg) == P(m)) -> 
		( (state(msg) == s && count == 2) ->
		    s_stob(mes(m,SYNC),n).move(n,s).s_stob(mes(m,s),n).
		    Lift3(n,m,nos,s,nos)
		, s_stob(mes(m,s),n).Lift3(n,m,nos,s,nos)
		)
	    , ( (state(msg) == s) -> Lift3(n,m,nos,s,P(count))
	      , Lift3(n,m,nos,s,count)
	      )
	    )
	  );

init  hide
      ( { c_stob,c_btos,c_open_relay,c_close_relay },
	allow
	( { c_stob,c_btos,c_open_relay,c_close_relay,protocol_error,
	    setref,up,down,released, move },
	  comm
	  ( { s_stob|r_stob->c_stob, s_btos|r_btos->c_btos,
	      s_open_relay|r_open_relay->c_open_relay,
	      s_close_relay|r_close_relay->c_close_relay },
	    Bus([]) || Lift0(1) || Lift0(2) || Lift0(3)
	  )
	)
      );
