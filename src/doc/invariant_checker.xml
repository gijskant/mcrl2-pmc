<refentry id="invariant_checker">
 <info>
  <date>2005-2007</date>
 </info>

<refmeta>
 <refentrytitle>invariant_checker</refentrytitle>
 <manvolnum>7</manvolnum>
  <refmiscinfo class="source">invariant_checker</refmiscinfo>
  <refmiscinfo class="version"></refmiscinfo>
  <refmiscinfo class="manual">Library Functions</refmiscinfo>
</refmeta>

<refnamediv>
<refname>invariant_checker</refname>
<refpurpose>a class that checks if an expression is an invariant of an mCRL2 LPE</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcprototype>
  <funcdef>&invariant_checker_constructor;</funcdef>
  <paramdef>&type_atermappl; &par_lpe;</paramdef>
  <paramdef>&type_rewrite_strategy; &par_rewrite_strategy; = &const_strat_jitty;</paramdef>
  <paramdef>&type_int; &par_time_limit; = 0</paramdef>
  <paramdef>&type_bool; &par_path_eliminator; = &const_false;</paramdef>
  <paramdef>&type_smt_solver_type; &par_solver_type; = &const_solver_type_ario;</paramdef>
  <paramdef>&type_bool; &par_apply_induction; = &const_false;</paramdef>
  <paramdef>&type_bool; &par_counter_example; = &const_false;</paramdef>
  <paramdef>&type_bool; &par_all_violations; = &const_false;</paramdef>
  <paramdef>&type_char_string; &par_dot_file_name; = 0</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_atermappl; &invariant_checker_check_invariant;</funcdef>
  <paramdef>&type_atermappl; &par_invariant;</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
  The class &class_invariant_checker; is initialized with an LPE using the constructor &invariant_checker_constructor;. After initialization,
  the function &invariant_checker_check_invariant; can be called any number of times to check whether an expression of sort &sort_bool; passed as
  argument &par_invariant; is an invariant of this LPE. A new instance of the class &class_invariant_checker; has to be created for each new LPE
  that has to be checked.
</para>
<para>
  The class &class_invariant_checker; uses an instance of the class &class_bdd_prover; to check whether a formula is a valid invariant of an mCRL2
  LPE. The constructor &invariant_checker_constructor; initializes the BDD based prover with the parameters &par_rewrite_strategy;,
  &par_time_limit;,
  &par_path_eliminator;, &par_solver_type; and the data specification of the LPE passed as parameter &par_lpe;. The
  parameter &par_rewrite_strategy; specifies which rewrite strategy is used by the prover's rewriter. It can be set to either
  &const_strat_inner;, &const_strat_innerc;, &const_strat_jitty; or &const_strat_jittyc;. The parameter &par_time_limit; specifies the maximum
  amount of time in seconds to be spent by the prover on proving a single expression. If &par_time_limit; is set to 0, no time limit will be 
  enforced.
  The parameter &par_path_eliminator; specifies whether or not path elimination is applied. When path elimination is applied, the prover uses an
  SMT solver to remove inconsistent paths from BDDs. The parameter &par_solver_type; specifies which SMT solver is used for path elimination.
  Either the SMT solver &solver_ario; or &solver_cvc_lite; can be used. To use one of these solvers, the directory containing the corresponding
  executable must be in the path. On June the 20th of 2006, Ario 1.1 was available on &link_ario; and CVC Lite was available on &link_cvc;.
  If the parameter &par_path_eliminator; is set to &const_false;, the parameter &par_solver_type; is ignored. The parameter &par_apply_induction;
  indicates whether or not induction on list will be applied.
</para>
<para>
  The parameter &par_dot_file_name;
  specifies whether a file in dot format of the resulting BDD is saved each time the prover cannot determine whether an expression is a 
  contradiction or a tautology. If the parameter is set to 0, no .dot files are saved. If a string is passed as parameter &par_dot_file_name;, this
  string will be used as the prefix of the filenames. An instance of the class &class_bdd2dot; is used to save these files in dot format.
</para>
<para>
  If the parameter &par_counter_example; is set to &const_true;, a so
  called counter example will be printed to &stderr; each time a summand is encountered that violates the invariant. A counter example is a
  valuation for which the expression to be proven does not
  hold. If the parameter &par_all_violations; is set to &const_true;, the invariant checker will not stop as soon as a violation of the invariant
  is found, but will report all violations instead.
</para>
<para>
  Given an LPE,
  <literallayout>
    P(d: D) = ...
            + sum ei: Ei. ci(d, ei) -> ai(fi(d, ei)) . P(gi(d, ei))
            + ...;
  </literallayout>
  an instance of the class &class_invariant_checker; will generate a formula of the form
  <literallayout>
    inv(d) /\ ci(d, ei) => inv(gi(d, ei))
  </literallayout>
  for each of the summands, where <literal>inv()</literal> is the expression passed as parameter &par_invariant;. If this expression passed as
  parameter &par_invariant; holds for the initial state and all the generated formulas are tautologies according to the prover, it is an invariant.
</para>
</refsect1>

<refsect1>
<title>Preconditions</title>
<para>
  The following precondition has to be satisfied for &invariant_checker_constructor;:
  <itemizedlist>
    <listitem>
      <para>the argument passed as parameter &par_lpe; is a valid mCRL2 LPE</para>
    </listitem>
    <listitem>
      <para>
        the argument passed as parameter &par_time_limit; is greater than or equal to 0. If the argument is equal to 0, no time limit will be
        enforced
      </para>
    </listitem>
  </itemizedlist>
</para>
<para>
  The following precondition has to be satisfied for &invariant_checker_check_invariant;:
  <itemizedlist>
    <listitem>
      <para>the argument passed as parameter &par_invariant; is a valid expression in internal mCRL2 format</para>
  </listitem>
  </itemizedlist>
</para>
</refsect1>

<refsect1>
<title>Author</title>
<para>
  Written by Luc Engelen. Please send all complaints, comments and bug reports to <email>bug@mcrl2.org</email>.
</para>
</refsect1>

</refentry>
