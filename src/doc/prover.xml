<refentry id="prover">

 <info>
  <date>2005-2007</date>
 </info>

<refmeta>
 <refentrytitle>prover</refentrytitle>
 <manvolnum>7</manvolnum>
 <refmiscinfo class="source">prover</refmiscinfo>
 <refmiscinfo class="version"></refmiscinfo>
 <refmiscinfo class="manual">Library Functions</refmiscinfo>
</refmeta>

<refnamediv>
<refname>prover</refname>
<refpurpose>a base class for mCRL2 provers that determine if formulas are contradictions or tautologies</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcprototype>
  <funcdef>&prover_constructor;</funcdef>
  <paramdef>&type_atermappl; &par_equations;</paramdef>
  <paramdef>&type_rewrite_strategy; &par_strategy; = &const_strat_jitty;</paramdef>
  <paramdef>&type_int; &par_time_limit; = 0</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_void; &prover_set_formula;</funcdef>
  <paramdef>&type_atermappl; &par_formula;</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_void; &prover_set_time_limit;</funcdef>
  <paramdef>&type_int; &par_time_limit;</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_virtual; &type_abstract; &type_bool; &prover_is_tautology;</funcdef>
  <paramdef>&type_void;</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_virtual; &type_abstract; &type_bool; &prover_is_contradiction;</funcdef>
  <paramdef>&type_void;</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_virtual; &type_abstract; &type_atermappl; &prover_get_witness;</funcdef>
  <paramdef>&type_void;</paramdef>
</funcprototype>
<funcprototype>
  <funcdef>&type_virtual; &type_abstract; &type_atermappl; &prover_get_counter_example;</funcdef>
  <paramdef>&type_void;</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
  The term "formula" in the following text denotes arbitrary expressions of sort &sort_bool; in the mCRL2 format.
</para>
<para>
  The &class_prover; class is a base class for provers. Provers take formulas as input and indicate if these formulas are
  tautologies or contradictions. Since provers are not necessarily complete, a prover can be unable to determine if a formula is a
  tautology or a contradiction for some formulas. If this is the case, the prover will indicate this fact. A prover uses a rewriter to rewrite
  parts of the
  formulas it manipulates. The constructor &prover_constructor; initializes the prover's rewriter with the data equations in internal
  mCRL2 format passed as parameter &par_equations; and
  the rewrite strategy passed as parameter &par_strategy;. To limit the number of seconds spent on proving a single formula, a time limit can be
  set. This time limit can be set initially by the constructor &prover_constructor; and can be changed afterwards using the method
  &prover_set_time_limit;. If the time limit is set to 0, no time limit will be enforced.
</para>
<para>
  Once a prover is created, the formula to be proven can be set using the method &prover_set_formula;. The method &prover_set_formula; takes
  a propositional formula in internal mCRL2 format as parameter &par_formula;.
</para>
<para>
  The methods &prover_is_tautology; and
  &prover_is_contradiction; can then indicate whether or not this formula is a tautology or a contradiction. These methods will return
  &answer_yes;, &answer_no; or &answer_undefined;.
</para>
<para>
  If a formula is neither a tautology nor a contradiction according to the prover, a so called
  witness or counter example can be returned by the methods &prover_get_witness; and &prover_get_counter_example;. A witness is a valuation
  for which the formula holds, a counter example is a valuation for which it does not hold.
</para>
</refsect1>

<refsect1>
<title>Preconditions</title>
<para>
  The following preconditions have to be satisfied for &prover_constructor; and &prover_set_time_limit;:
  <itemizedlist>
    <listitem>
      <para>
        the argument passed as parameter &par_time_limit; is greater than or equal to 0. If the argument is equal to 0, no time limit will be
        enforced
      </para>
    </listitem>
    <listitem>
      <para>
        the argument passed as parameter &par_equations; is a specification of data equations in internal mCRL2 format
      </para>
    </listitem>
  </itemizedlist>
</para>
<para>
  The following precondition has to be satisfied for &prover_is_tautology;, &prover_is_contradiction;,
  &prover_get_counter_example; and &prover_get_witness;:
  <itemizedlist>
    <listitem>
      <para>the method &prover_set_formula; has been called</para>
    </listitem>
  </itemizedlist>
</para>
<para>
  The following precondition has to be satisfied for &prover_set_formula;:
  <itemizedlist>
    <listitem>
      <para>the argument passed as parameter &par_formula; is an expression of sort &sort_bool; in internal mCRL2 format</para>
    </listitem>
  </itemizedlist>
</para>
</refsect1>

<refsect1>
<title>Author</title>
<para>
  Written by Luc Engelen. Please send all complaints, comments and bug reports to &bugmail;.
</para>
</refsect1>

</refentry>
