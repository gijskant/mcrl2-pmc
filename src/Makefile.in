#All objects that are used
OBJECTS            =

#Redefine default definitions using autoconf
include config

# Objects that require wxWidgets CPPFLAGS to compile
WX_OBJECTS         = xsim.o xsimbase.o xsimmain.o xsimtrace.o xsimtracedll.o

#ATerm definitions
ATERM_NAME         = aterm/libATerm.a
ATERM_OBJECTS      = aterm/afun.o aterm/aterm.o aterm/bafio.o aterm/byteio.o aterm/gc.o aterm/hash.o aterm/list.o aterm/make.o aterm/md5c.o aterm/memory.o aterm/tafio.o aterm/version.o
ifdef BUILD_ATERM
OBJECTS           += $(ATERM_OBJECTS)
ATERM_DEP          = $(ATERM_NAME)
endif

#SVC definitions
LIBSVC_NAME        = svc/libsvc.a
LIBSVC_OBJECTS     = svc/blocklist.o svc/code.o svc/compress.o svc/hashtable.o svc/huffman.o svc/lz.o svc/ptable.o svc/svc1.o svc/svc2.o 
OBJECTS           += $(LIBSVC_OBJECTS)

#svc2fsm definitions
SVC2FSM_NAME       = svc/svc2fsm
SVC2FSM_OBJECTS    = svc/svc2fsm.o libprint_c.o libprint.o libstruct.o liblowlevel.o
OBJECTS           += $(SVC2FSM_OBJECTS)
SVC2FSM_LDFLAGS    = -lrewrite -lsvc -l$(ATERM) -lm $(LIBDL)

#rewrite library definitions
LIBREWR_NAME       = librewrite.a
LIBREWR_OBJECTS    = librewrite_c.o librewrite.o rewr_inner.o rewr_jitty.o rewr_innerc.o
OBJECTS           += $(LIBREWR_OBJECTS)
LIBREWR_LDFLAGS    = -l$(ATERM) -lm

#mcrl22lpe definitions
MCRL22LPE_NAME     = mcrl22lpe
MCRL22LPE_OBJECTS  = mcrl22lpe.o lin_std.o lin_alt.o mcrl2parser.o mcrl2lexer.o typecheck.o dataimpl.o libprint_c.o libstruct.o liblowlevel.o libalpha.o
OBJECTS           += $(MCRL22LPE_OBJECTS)
MCRL22LPE_LDFLAGS  = -lrewrite -l$(ATERM) -lm $(LIBDL)

#lpepp definitions
LPEPP_NAME         = lpepp
LPEPP_OBJECTS      = lpepp.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(LPEPP_OBJECTS)
LPEPP_LDFLAGS      = -lrewrite -l$(ATERM) -lm $(LIBDL)

#sim definitions
SIM_NAME           = sim
SIM_OBJECTS        = sim.o libnextstate.o libprover.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(SIM_OBJECTS)
SIM_LDFLAGS        = -lrewrite -l$(ATERM) -lm $(LIBDL)

#xsim definitions
XSIM_NAME          = xsim
XSIM_OBJECTS       = xsim.o xsimbase.o xsimmain.o xsimtrace.o libnextstate.o libprover.o libprint.o libprint_c.o libstruct.o liblowlevel.o
ifdef USE_WX
OBJECTS           += $(XSIM_OBJECTS)
endif
XSIM_LDFLAGS       = -lrewrite -l$(ATERM) -lm $($LIBDL) $(WX_LIBS)

#xsimtrace library definitions
XSIMTRACE_NAME     = xsimtrace.so
XSIMTRACE_OBJECTS  = xsimtracedll.o
ifdef USE_WX
OBJECTS           += $(XSIMTRACE_OBJECTS)
endif
ifeq ($(HOST_OS),MACOSX)
  XSIMTRACE_LDFLAGS = -bundle -undefined dynamic_lookup
else
  XSIMTRACE_LDFLAGS = -shared
endif

ifdef USE_BOOST
 # Static link to boost libraries
 BOOST_LIBRARIES = -lboost_program_options

 ifdef BUILD_BOOST
   ifneq ($(HOST_OS),WINDOWS)
     ifeq ($(HOST_OS),MACOSX)
       BOOST_LIBRARIES = -lboost_program_options
     else
       BOOST_LIBRARIES = -Wl,-static -lboost_program_options -Wl,-call_shared
     endif
   endif
 endif

 ifneq ($(BOOST_PREFIX),)
  BOOST_INCLUDES   = -I$(BOOST_PREFIX)/include
  BOOST_LIBRARIES := -L$(BOOST_PREFIX)/lib $(BOOST_LIBRARIES)
 endif

 #lpeinfo definitions
 LPEINFO_NAME        = lpeinfo
 LPEINFO_OBJECTS     = libprint.o libstruct.o libprint_c.o liblowlevel.o lpeinfo.o
 OBJECTS            += $(LPEINFO_OBJECTS)
 LPEINFO_LDFLAGS     = -lrewrite -l$(ATERM) -lm $(LIBDL)

 #lpconstelm definitions
 LPECONSTELM_NAME    = lpeconstelm
 LPECONSTELM_OBJECTS = libprint.o libstruct.o libprint_c.o liblowlevel.o lpeconstelm.o
 OBJECTS            += $(LPECONSTELM_OBJECTS)
 LPECONSTELM_LDFLAGS = -lrewrite -l$(ATERM) -lm $(LIBDL)

 #lpeparelm definitions
 LPEPARELM_NAME      = lpeparelm
 LPEPARELM_OBJECTS   = libprint.o libstruct.o libprint_c.o liblowlevel.o lpeparelm.o
 OBJECTS            += $(LPEPARELM_OBJECTS)
 LPEPARELM_LDFLAGS   = -lrewrite -l$(ATERM) -lm $(LIBDL)
endif

#lperewr definitions
LPEREWR_NAME       = lperewr
LPEREWR_OBJECTS    = lperewr.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(LPEREWR_OBJECTS)
LPEREWR_LDFLAGS    = -lrewrite -l$(ATERM) -lm $(LIBDL)

#lpe2lts definitions
LPE2LTS_NAME       = lpe2lts
LPE2LTS_OBJECTS    = lpe2lts.o libnextstate.o libprover.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(LPE2LTS_OBJECTS)
LPE2LTS_LDFLAGS    = -lrewrite -lsvc -l$(ATERM) -lm $(LIBDL)

#tbf2lpe definitions
TBF2LPE_NAME       = tbf2lpe
TBF2LPE_OBJECTS    = tbf2lpe.o lpetrans.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(TBF2LPE_OBJECTS)
TBF2LPE_LDFLAGS    = -lrewrite -l$(ATERM) -lm $(LIBDL)

#pnml2mcrl2 definitions
PNML2MCRL2_NAME    = pnml2mcrl2
PNML2MCRL2_OBJECTS = pnml2mcrl2.o typecheck.o libprint_c.o libstruct.o liblowlevel.o
ifdef USE_LIBXML2
OBJECTS           += $(PNML2MCRL2_OBJECTS)
endif
PNML2MCRL2_LDFLAGS = -lrewrite -l$(ATERM) $(LIBXML2_LDFLAGS) $(LIBDL)
$(PNML2MCRL2_OBJECTS) $(patsubst %.o,%.d,$(PNML2MCRL2_OBJECTS)): CPPFLAGS += $(LIBXML2_CPPFLAGS)

#alpha definitions
ALPHA_NAME         = alpha
ALPHA_OBJECTS      = alpha.o libalpha.o mcrl2parser.o mcrl2lexer.o typecheck.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(ALPHA_OBJECTS)
ALPHA_LDFLAGS      = -lrewrite -l$(ATERM) -lm $(LIBDL)

#lin definitions
LIN_NAME           = lin
LIN_OBJECTS        = lin.o lin_alt.o mcrl2parser.o mcrl2lexer.o typecheck.o dataimpl.o libprint_c.o libstruct.o liblowlevel.o
OBJECTS           += $(LIN_OBJECTS)
LIN_LDFLAGS        = -lrewrite -l$(ATERM) -lm $(LIBDL)

#Group definitions
EXPERIMENTALS      = $(LIN_NAME) $(ALPHA_NAME)
EXE_NAMES         += $(MCRL22LPE_NAME) $(LPEINFO_NAME) $(LPEPARELM_NAME) $(LPECONSTELM_NAME) $(LPEPP_NAME) $(LPE2LTS_NAME) $(SIM_NAME) $(XSIM_NAME) $(TBF2LPE_NAME) $(PNML2MCRL2_NAME) $(LPEREWR_NAME)
LIB_NAMES          = $(XSIMTRACE_NAME)
OBJECTS           := $(sort $(OBJECTS))

#Make rules
.PHONY: all install clean distclean boost documentation studio experimental
.PRECIOUS: mcrl2parser.c mcrl2lexer.c

all: $(EXE_NAMES) $(LIB_NAMES)
	@$(RM) revision

experimental: $(EXPERIMENTALS)

# Build bjam and local boost 
ifeq ($(BOOST_PREFIX),boost)
all distclean install: boost
endif

# Build/clean/install documentation
ifdef USE_XMLTO
all distclean install: documentation
endif

# Build/clean/install libxml2 dependent targets
ifdef USE_LIBXML2
ifdef USE_WX
all clean distclean install: studio
endif
endif

# For building documentation
documentation:
	@$(MAKE) -C doc $(MAKECMDGOALS)

# For building studio
studio: boost
	@$(MAKE) -C studio $(MAKECMDGOALS)

# For building bjam and boost libraries
boost:
ifdef BUILD_BOOST
	@$(MAKE) -C boost $(MAKECMDGOALS)
endif

# Add revision number
ifdef USE_LIBXML2
ifdef USE_BOOST
ifeq (,$(findstring $(MAKECMDGOALS),clean distclean))
%.o: revision
endif

revision: studio/utility/get_revision
	@echo "CPPFLAGS += -DREVISION=$$(studio/utility/get_revision)" > revision

# Force local boost build because adding `studio/utility/get_revision: boost' does not work
studio/utility/get_revision: studio/utility/get_revision.cpp
ifdef BUILD_BOOST
	@$(MAKE) -C boost
endif
	$(CXX) -I$(BOOST_PREFIX)/include -Wl,-rpath=$(BOOST_PREFIX)/lib -L$(BOOST_PREFIX)/lib -lboost_filesystem $< -o $@

-include revision

endif
endif

install: all
	$(INSTALL) -d $(bindir)
	@for f in $(EXE_NAMES); do\
	  if test -f $$f; then\
	    c="$(INSTALL) $$f $(bindir)";\
	    echo $$c;\
	    $$c;\
	  fi;\
	done
	$(INSTALL) -d $(libdir)
	@for f in $(LIB_NAMES); do\
	  if test -f $$f; then\
	    c="$(INSTALL) $$f $(libdir)";\
	    echo $$c;\
	    $$c;\
	  fi;\
	done
ifdef USE_WX
ifeq ($(HOST_OS),MACOSX)
	/Developer/Tools/Rez -t APPL -o xsim sample.r
	/Developer/Tools/SetFile -a C xsim   
	mkdir -p ../xsim.app/Contents
	mkdir -p ../xsim.app/Contents/MacOS
	mkdir -p ../xsim.app/Contents/Resources
	cp xsim.plist ../xsim.app/Contents/Info.plist
	echo -n "APPL????" > ../xsim.app/Contents/PkgInfo
	cp xsim $(bindir)/xsim
	ln -f $(bindir)/xsim ../xsim.app/Contents/MacOS/xsim
	cp -f xsim.icns ../xsim.app/Contents/Resources/xsim.icns
endif
endif

clean:
	$(RM) $(EXE_NAMES) $(EXPERIMENTALS) $(LIB_NAMES) *.o *.a *.d *.dpp lpe/*.o lpe/*.dpp aterm/*.o aterm/*.a aterm/*.d svc/*.o svc/*.a svc/*.d svc/*.dpp mcrl2lexer.c mcrl2parser.c mcrl2parser.h mcrl2parser.output lpeinfo lpeparelm lpeconstelm config.status config.log *~ core core.*

distclean: clean
	$(RM) -r autom4te.cache Makefile config rewr_innerc_aux.h revision

$(ATERM_NAME): $(ATERM_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(ATERM_OBJECTS)

$(LIBSVC_NAME): $(LIBSVC_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(LIBSVC_OBJECTS)

$(LIBREWR_NAME) : $(LIBREWR_OBJECTS) $(ATERM_DEP)
	$(AR) $(ARFLAGS) $@ $(LIBREWR_OBJECTS)
#	$(CC) -shared -o $@ $(LIBREWR_OBJECTS)

$(MCRL22LPE_NAME) : $(MCRL22LPE_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(MCRL22LPE_OBJECTS) $(LDFLAGS) $(MCRL22LPE_LDFLAGS)

$(LPEPP_NAME) : $(LPEPP_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(LPEPP_OBJECTS) $(LDFLAGS) $(LPEPP_LDFLAGS)

$(SIM_NAME) : $(SIM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(SIM_OBJECTS) $(LDFLAGS) $(SIM_LDFLAGS)

ifdef USE_WX
$(WX_OBJECTS) $(patsubst %o,%dpp,$(WX_OBJECTS)): CPPFLAGS += $(WX_CPPFLAGS)
xsimtracedll.o: CXXFLAGS += -fPIC

$(XSIM_NAME): $(XSIM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(XSIM_OBJECTS) $(LDFLAGS) $(XSIM_LDFLAGS)

$(XSIMTRACE_NAME): $(XSIMTRACE_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(XSIMTRACE_OBJECTS) $(LDFLAGS) $(XSIMTRACE_LDFLAGS)
else
$(XSIM_NAME):
	@echo cannot make target $@ because the wxWidgets library cannot be used

$(XSIMTRACE_NAME):
	@echo cannot make target $@ because the wxWidgets library cannot be used
endif

svc/%: CPPFLAGS += -I./ -Iaterm

# Targets that depend on any of the boost libraries
ifdef USE_BOOST
lpe%: CPPFLAGS += $(BOOST_INCLUDES) -I./ -Iaterm
lpe%: CXXFLAGS += -ftemplate-depth-256

$(LPEINFO_NAME) : $(LPEINFO_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME) boost
	$(CXX) $(CXXFLAGS) -o $@ $(CPPFLAGS) $(LPEINFO_OBJECTS) $(BOOST_LIBRARIES) $(LDFLAGS) $(LPEINFO_LDFLAGS)

$(LPECONSTELM_NAME) : $(LPECONSTELM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME) boost
	$(CXX) $(CXXFLAGS) -o $@ $(CPPFLAGS) $(LPECONSTELM_OBJECTS) $(BOOST_LIBRARIES) $(LDFLAGS) $(LPECONSTELM_LDFLAGS)

$(LPEPARELM_NAME) : $(LPEPARELM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME) boost
	$(CXX) $(CXXFLAGS) -o $@ $(CPPFLAGS) $(LPEPARELM_OBJECTS) $(BOOST_LIBRARIES) $(LDFLAGS) $(LPEPARELM_LDFLAGS)
else
$(LPEINFO_NAME) :
	@echo "Missing Boost libraries so skipping build of lpeinfo."
$(LPECONSTELM_NAME) :
	@echo "Missing Boost libraries so skipping build of lpeconstelm."
$(LPEPARELM_NAME) :
	@echo "Missing Boost libraries so skipping build of lpeparelm."
endif

$(SVC2FSM_NAME) : $(SVC2FSM_OBJECTS) $(ATERM_DEP) $(LIBSVC_NAME) $(LIBREWR_NAME)
	$(CXX) -o $@ $(SVC2FSM_OBJECTS) $(LDFLAGS) $(SVC2FSM_LDFLAGS)

$(LPEREWR_NAME) : $(LPEREWR_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(LPEREWR_OBJECTS) $(LDFLAGS) $(LPEREWR_LDFLAGS)

$(LPE2LTS_NAME) : $(LPE2LTS_OBJECTS) $(ATERM_DEP) $(LIBSVC_NAME) $(LIBREWR_NAME)
	$(CXX) -o $@ $(LPE2LTS_OBJECTS) $(LDFLAGS) $(LPE2LTS_LDFLAGS)

$(TBF2LPE_NAME) : $(TBF2LPE_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(TBF2LPE_OBJECTS) $(LDFLAGS) $(TBF2LPE_LDFLAGS)

ifdef USE_LIBXML2
$(patsubst %.o, %.dpp, $(PNML2MCRL2_OBJECTS)): CPPFLAGS+=$(LIBXML2_CPPFLAGS)

$(PNML2MCRL2_NAME) : $(PNML2MCRL2_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(PNML2MCRL2_OBJECTS) $(LDFLAGS) $(PNML2MCRL2_LDFLAGS)
else
$(PNML2MCRL2_NAME) :
	@echo cannot make target $@ because the xml2 library cannot be used
endif

$(ALPHA_NAME) : $(ALPHA_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(ALPHA_OBJECTS) $(LDFLAGS) $(ALPHA_LDFLAGS)

$(LIN_NAME) : $(LIN_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(LIN_OBJECTS) $(LDFLAGS) $(LIN_LDFLAGS)

%.c : %.y
	$(BISON) $(BFLAGS) -o $@ $<

%.c : %.l
	$(LEX) $(LFLAGS) -o$@ $<

ifeq (,$(findstring $(MAKECMDGOALS),clean distclean))
Makefile: Makefile.in config.in
	@echo "You must (re)configure your source tree first."
	@exit 1
endif

# *.cpp is needed for generated code (e.g. by bison)
*.cpp *.o aterm/*.o svc/*.o lpe/*.o: Makefile

%.d : %.c
	@echo generating dependencies for $<
	@$(CC) -MT '$*.o' -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

%.dpp : %.cpp
	@echo generating dependencies for $<
	@$(CXX) -MT '$*.o' -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

ifeq (,$(findstring $(MAKECMDGOALS),clean distclean))
-include $(foreach s,$(OBJECTS),$(shell if test -f $(basename $s).c; then echo -n $(basename $s).d; fi))
-include $(foreach s,$(OBJECTS),$(shell if test -f $(basename $s).cpp; then echo -n $(basename $s).dpp; fi))
endif

#Note: to make a shared version of the gsrewr library instead of a static one, do the following:
#- add the option `-fpic' to CFLAGS
#- change the `a' suffix to `so' in LIBREWR_NAME
#- in the rule with target $(LIBREWR_NAME), replace the command by
#    $(CC) -shared -o $@ $(LIBREWR_OBJECTS) $(LIBREWR_LDFLAGS)
#- extend the environment variable LD_LIBRARY_PATH with `.'
