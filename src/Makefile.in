#Redefine default definitions using autoconf
HOST_OS            = @HOST_OS@
CC                 = @CC@
CFLAGS             = @CFLAGS@
CPP                = @CPP@
CPPFLAGS           = @CPPFLAGS@
CXX                = @CXX@
CXXFLAGS           = @CXXFLAGS@
ifeq ($(HOST_OS),MACOSX)
LDFLAGS            = @LDFLAGS@
else
LDFLAGS            = -Wl,-rpath,$(libdir) -rdynamic @LDFLAGS@
endif
ARFLAGS            = crs
INSTALL            = install
LEX                = @LEX@
LFLAGS             = -I -Pgsyy
BISON              = @BISON@
BFLAGS             = -d -pgsyy
ATERM              = @ATERM_NAME@ 
BUILD_ATERM        = @BUILD_ATERM@
USE_XML2           = @USE_XML2@
USE_WX             = @USE_WX@
WX_LIBS            = @WX_LIBS@

#installation directories
prefix             = @prefix@
exec_prefix        = @exec_prefix@
bindir             = @bindir@
libdir             = @libdir@
datadir            = @datadir@
includedir         = @includedir@
infodir            = @infodir@
mandir             = @mandir@

#Environment variable for Mac
ifeq ($(HOST_OS),MACOSX)
MACOSX_DEPLOYMENT_TARGET = 10.3
export MACOSX_DEPLOYMENT_TARGET
endif

#All objects that are used
OBJECTS            =

#ATerm definitions
ATERM_NAME         = aterm/libATerm.a
ATERM_OBJECTS      = aterm/afun.o aterm/aterm.o aterm/bafio.o aterm/byteio.o aterm/gc.o aterm/hash.o aterm/list.o aterm/make.o aterm/md5c.o aterm/memory.o aterm/tafio.o aterm/version.o
ifdef BUILD_ATERM
OBJECTS           += $(ATERM_OBJECTS)
ATERM_DEP          = $(ATERM_NAME)
endif

#SVC definitions
LIBSVC_NAME        = svc/libsvc.a
LIBSVC_OBJECTS     = svc/blocklist.o svc/code.o svc/compress.o svc/hashtable.o svc/huffman.o svc/lz.o svc/ptable.o svc/svc1.o svc/svc2.o 
OBJECTS           += $(LIBSVC_OBJECTS)

#Parser definitions
LIBPARSER_NAME     = libgsparse.a
LIBPARSER_OBJECTS  = libgsparse.o gsparser.o gslexer.o gstypecheck.o gsdataimpl.o gsfunc.o gslowlevel.o
OBJECTS           += $(LIBPARSER_OBJECTS)
LIBPARSER_LDFLAGS  = -l$(ATERM) -lm
PARSER_NAME        = gsparse
PARSER_OBJECTS     = gsparse.o
OBJECTS           += $(PARSER_OBJECTS)
PARSER_LDFLAGS     = -lgsparse -l$(ATERM) -lm

#Printer definitions
PRINTER_NAME       = gsprint
PRINTER_OBJECTS    = gsprint.o
OBJECTS           += $(PRINTER_OBJECTS)
PRINTER_LDFLAGS    = -lgsparse -l$(ATERM) -lm

#Lineariser definitions
LINEARISER_NAME    = linearise
LINEARISER_OBJECTS = linearise.o
OBJECTS           += $(LINEARISER_OBJECTS)
LINEARISER_LDFLAGS = -lgsparse -lgsrewrite -l$(ATERM) -lm -ldl
LIN_NAME           = lin
LIN_OBJECTS        = lin.o gslinearise2.o
OBJECTS           += $(LIN_OBJECTS)
LIN_LDFLAGS        = -lgsparse -lgsrewrite -l$(ATERM) -lm -ldl

#Rewriter definitions
LIBREWR_NAME       = libgsrewrite.a
LIBREWR_OBJECTS    = libgsrewrite.o gsrewr_inner.o gsrewr_inner2.o gsrewr_inner3.o gsrewr_innerc.o gsrewr_jitty.o gsfunc.o gslowlevel.o gssubstitute.o
OBJECTS           += $(LIBREWR_OBJECTS)
LIBREWR_LDFLAGS    = -l$(ATERM) -lm
REWR_NAME          = gsrewr
REWR_OBJECTS       = gsrewr.o
OBJECTS           += $(REWR_OBJECTS)
REWR_LDFLAGS       = -lgsrewrite -lgsparse -l$(ATERM) -lm -ldl

#pnml2mcrl2 definitions
PNML2MCRL2_NAME    = pnml2mcrl2
PNML2MCRL2_OBJECTS = pnml2mcrl2.o
ifdef USE_XML2
OBJECTS           += $(PNML2MCRL2_OBJECTS)
endif
PNML2MCRL2_LDFLAGS = -lgsparse -l$(ATERM) -lxml2 -lm

#Alphabet axiom applicator definitions
ALPHA_NAME         = gsalpha
ALPHA_OBJECTS      = gsalpha.o libgsalpha.o
OBJECTS           += $(ALPHA_OBJECTS)
ALPHA_LDFLAGS      = -lgsparse -l$(ATERM) -lm

#Alphabet axiom applicator definitions
M2M2_NAME          = mcrl2mcrl2
M2M2_OBJECTS       = mcrl2mcrl2.o lpetrans.o
OBJECTS           += $(M2M2_OBJECTS)
M2M2_LDFLAGS       = -lgsparse -l$(ATERM) -lm

#Instantiator definitions
INSTAN_NAME        = gsinstantiate
INSTAN_OBJECTS     = gsinstantiate.o libgsnextstate.o libgsprover.o gssubstitute.o
OBJECTS           += $(INSTAN_OBJECTS)
INSTAN_LDFLAGS     = -lgsrewrite -lgsparse -lsvc -l$(ATERM) -lm -ldl

#Simulator definitions
SIM_NAME           = sim
SIM_OBJECTS        = sim.o libgsnextstate.o libgsprover.o
OBJECTS           += $(SIM_OBJECTS)
SIM_LDFLAGS        = -lgsrewrite -lgsparse -l$(ATERM) -lm -ldl
XSIM_NAME          = xsim
XSIM_OBJECTS       = xsim.o xsimbase.o xsimmain.o xsimtrace.o libgsnextstate.o libgsprover.o libprint.o
ifdef USE_WX
OBJECTS           += $(XSIM_OBJECTS)
endif
XSIM_LDFLAGS       = -lgsrewrite -lgsparse -l$(ATERM) -lm -ldl $(WX_LIBS)
XSIMTRACE_NAME     = xsimtrace.so
XSIMTRACE_OBJECTS  = xsimtracedll.o
ifdef USE_WX
OBJECTS           += $(XSIMTRACE_OBJECTS)
endif

ifeq ($(HOST_OS),MACOSX)
  XSIMTRACE_LDFLAGS  = -bundle -undefined dynamic_lookup
else
  XSIMTRACE_LDFLAGS  = -shared
endif

#Group definitions
EXE_NAMES          =  $(PARSER_NAME) $(PRINTER_NAME) $(LINEARISER_NAME) $(LIN_NAME) $(REWR_NAME) $(ALPHA_NAME) $(M2M2_NAME) $(PNML2MCRL2_NAME) $(INSTAN_NAME) $(SIM_NAME) $(XSIM_NAME)
LIB_NAMES          =  $(XSIMTRACE_NAME)
OBJECTS            := $(sort $(OBJECTS))

#Make rules
.PHONY: all install clean
.PRECIOUS: gsparser.c gslexer.c

all : $(EXE_NAMES) $(LIB_NAMES)

install: all
	$(INSTALL) -d $(bindir)
	@for f in $(EXE_NAMES); do\
	  if test -f $$f; then\
	    c="$(INSTALL) $$f $(bindir)";\
	    echo $$c;\
	    $$c;\
	  fi;\
	done
ifdef USE_WX
ifeq ($(HOST_OS),MACOSX)
	/Developer/Tools/Rez -t APPL -o xsim sample.r
	/Developer/Tools/SetFile -a C xsim   
	mkdir -p ../xsim.app/Contents
	mkdir -p ../xsim.app/Contents/MacOS
	mkdir -p ../xsim.app/Contents/Resources
	cp xsim.plist ../xsim.app/Contents/Info.plist
	echo -n "APPL????" > ../xsim.app/Contents/PkgInfo
	ln -f $(bindir)/xsim ../xsim.app/Contents/MacOS/xsim
	cp -f xsim.icns ../xsim.app/Contents/Resources/xsim.icns
endif
endif
	$(INSTALL) -d $(libdir)
	@for f in $(LIB_NAMES); do\
	  if test -f $$f; then\
	    c="$(INSTALL) $$f $(libdir)";\
	    echo $$c;\
	    $$c;\
	  fi;\
	done

clean :
	$(RM) $(EXE_NAMES) $(LIB_NAMES) *.o *.a *.d *.dpp aterm/*.o aterm/*.a aterm/*.d svc/*.o svc/*.a svc/*.d\
        gslexer.c gsparser.c gsparser.h gsparser.output config.status config.log *~ core core.*

$(ATERM_NAME): $(ATERM_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(ATERM_OBJECTS)

$(LIBSVC_NAME): $(LIBSVC_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(LIBSVC_OBJECTS)

$(LIBPARSER_NAME) : $(LIBPARSER_OBJECTS) $(ATERM_DEP)
	$(AR) $(ARFLAGS) $@ $(LIBPARSER_OBJECTS)
#	$(CC) -shared -o $@ $(LIBPARSER_OBJECTS)

$(PARSER_NAME) : $(PARSER_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME)
	$(CC) -o $@ $(PARSER_OBJECTS) $(LDFLAGS) $(PARSER_LDFLAGS)

$(PRINTER_NAME) : $(PRINTER_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME)
	$(CC) -o $@ $(PRINTER_OBJECTS) $(LDFLAGS) $(PRINTER_LDFLAGS)

$(LINEARISER_NAME) : $(LINEARISER_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME) $(LIBREWR_NAME)
	$(CC) -o $@ $(LINEARISER_OBJECTS) $(LDFLAGS) $(LINEARISER_LDFLAGS)

$(LIN_NAME) : $(LIN_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME)
	$(CC) -o $@ $(LIN_OBJECTS) $(LDFLAGS) $(LIN_LDFLAGS)

$(LIBREWR_NAME) : $(LIBREWR_OBJECTS) $(ATERM_DEP)
	$(AR) $(ARFLAGS) $@ $(LIBREWR_OBJECTS)
#	$(CC) -shared -o $@ $(LIBREWR_OBJECTS)

$(REWR_NAME) : $(REWR_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME) $(LIBREWR_NAME)
	$(CC) -o $@ $(REWR_OBJECTS) $(LDFLAGS) $(REWR_LDFLAGS)

$(ALPHA_NAME) : $(ALPHA_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME)
	$(CC) -o $@ $(ALPHA_OBJECTS) $(LDFLAGS) $(ALPHA_LDFLAGS)

$(M2M2_NAME) : $(M2M2_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME)
	$(CC) -o $@ $(M2M2_OBJECTS) $(LDFLAGS) $(M2M2_LDFLAGS)

ifdef USE_XML2
$(PNML2MCRL2_NAME) : $(PNML2MCRL2_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME)
	$(CC) -o $@ $(PNML2MCRL2_OBJECTS) $(LDFLAGS) $(PNML2MCRL2_LDFLAGS)
else
$(PNML2MCRL2_NAME) :
	@echo cannot make target $@ because the xml2 library cannot be used
endif

$(INSTAN_NAME) : $(INSTAN_OBJECTS) $(ATERM_DEP) $(LIBSVC_NAME) $(LIBPARSER_NAME) $(LIBREWR_NAME)
	$(CC) -o $@ $(INSTAN_OBJECTS) $(LDFLAGS) $(INSTAN_LDFLAGS)

$(SIM_NAME) : $(SIM_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME) $(LIBREWR_NAME)
	$(CC) -o $@ $(SIM_OBJECTS) $(LDFLAGS) $(SIM_LDFLAGS)

ifdef USE_WX
$(XSIM_NAME): $(XSIM_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME) $(LIBREWR_NAME)
	$(CXX) -o $@ $(XSIM_OBJECTS) $(LDFLAGS) $(XSIM_LDFLAGS)

$(XSIMTRACE_NAME): $(XSIMTRACE_OBJECTS) $(ATERM_DEP) $(LIBPARSER_NAME) $(LIBREWR_NAME)
	$(CXX) -o $@ $(XSIMTRACE_OBJECTS) $(LDFLAGS) $(XSIMTRACE_LDFLAGS)
else
$(XSIM_NAME):
	@echo cannot make target $@ because the wxWidgets library cannot be used

$(XSIMTRACE_NAME):
	@echo cannot make target $@ because the wxWidgets library cannot be used
endif

%.c : %.y
	$(BISON) $(BFLAGS) -o $@ $<

%.c : %.l
	$(LEX) $(LFLAGS) -o$@ $<

*.* aterm/*.* svc/*.* : Makefile

%.d : %.c
	@echo generating dependencies for $<
	@$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

%.dpp : %.cpp
	@echo generating dependencies for $<
	@$(CXX) -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

ifneq ($(MAKECMDGOALS),clean)
-include $(foreach s,$(OBJECTS),$(shell if test -f $(basename $s).c; then echo -n $(basename $s).d; fi))
-include $(foreach s,$(OBJECTS),$(shell if test -f $(basename $s).cpp; then echo -n $(basename $s).dpp; fi))
endif

#Note: to make a shared version of the gsparse library instead of a static one, do the following:
#- add the option `-fpic' to CFLAGS
#- change the `a' suffix to `so' in LIBPARSER_NAME
#- in the rule with target $(LIBPARSER_NAME), replace the command by
#    $(CC) -shared -o $@ $(LIBPARSER_OBJECTS) $(LIBPARSER_LDFLAGS)
#- extend the environment variable LD_LIBRARY_PATH with `.'

