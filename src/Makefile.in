#Redefine default definitions using autoconf
HOST_OS              = @HOST_OS@
CC                   = @CC@
CFLAGS               = @CFLAGS@
CPP                  = @CPP@
CPPFLAGS             = @CPPFLAGS@
CXX                  = @CXX@
CXXFLAGS             = @CXXFLAGS@
ifeq ($(HOST_OS),MACOSX)
LDFLAGS              = @LDFLAGS@
else
LDFLAGS              = -Wl,-rpath,$(libdir) -rdynamic @LDFLAGS@
endif
ARFLAGS              = crs
INSTALL              = install
LEX                  = @LEX@
LFLAGS               = -I -Pgsyy
BISON                = @BISON@
BFLAGS               = -d -pgsyy
ATERM                = @ATERM_NAME@ 
BUILD_ATERM          = @BUILD_ATERM@
USE_XML2             = @USE_XML2@
USE_WX               = @USE_WX@
WX_LIBS              = @WX_LIBS@
USE_BOOST            = @USE_BOOST@
BOOST_PREFIX         = @BOOST_PREFIX@
BOOST_LIBRARY_SUFFIX = @BOOST_LIBRARY_SUFFIX@
BJAM                 = boost/tools/build/jam_src/bin/bjam

#installation directories
prefix             = @prefix@
exec_prefix        = @exec_prefix@
bindir             = @bindir@
libdir             = @libdir@
datadir            = @datadir@
includedir         = @includedir@
infodir            = @infodir@
mandir             = @mandir@

#Environment variable for Mac
ifeq ($(HOST_OS),MACOSX)
MACOSX_DEPLOYMENT_TARGET = 10.3
export MACOSX_DEPLOYMENT_TARGET
endif

#All objects that are used
OBJECTS            =

#ATerm definitions
ATERM_NAME         = aterm/libATerm.a
ATERM_OBJECTS      = aterm/afun.o aterm/aterm.o aterm/bafio.o aterm/byteio.o aterm/gc.o aterm/hash.o aterm/list.o aterm/make.o aterm/md5c.o aterm/memory.o aterm/tafio.o aterm/version.o
ifdef BUILD_ATERM
OBJECTS           += $(ATERM_OBJECTS)
ATERM_DEP          = $(ATERM_NAME)
endif

#SVC definitions
LIBSVC_NAME        = svc/libsvc.a
LIBSVC_OBJECTS     = svc/blocklist.o svc/code.o svc/compress.o svc/hashtable.o svc/huffman.o svc/lz.o svc/ptable.o svc/svc1.o svc/svc2.o 
OBJECTS           += $(LIBSVC_OBJECTS)

#rewrite library definitions
LIBREWR_NAME       = libgsrewrite.a
LIBREWR_OBJECTS    = libgsrewrite.o gsrewr_inner.o gsrewr_inner2.o gsrewr_inner3.o gsrewr_innerc.o gsrewr_jitty.o gssubstitute.o
OBJECTS           += $(LIBREWR_OBJECTS)
LIBREWR_LDFLAGS    = -l$(ATERM) -lm

#mcrl22lpe definitions
MCRL22LPE_NAME     = mcrl22lpe
MCRL22LPE_OBJECTS  = mcrl22lpe.o lin_std.o lin_alt.o gsparser.o gslexer.o gstypecheck.o gsdataimpl.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(MCRL22LPE_OBJECTS)
MCRL22LPE_LDFLAGS  = -lgsrewrite -l$(ATERM) -lm -ldl

#lpepp definitions
LPEPP_NAME         = lpepp
LPEPP_OBJECTS      = lpepp.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(LPEPP_OBJECTS)
LPEPP_LDFLAGS      = -lgsrewrite -l$(ATERM) -lm -ldl

#sim definitions
SIM_NAME           = sim
SIM_OBJECTS        = sim.o libgsnextstate.o libgsprover.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(SIM_OBJECTS)
SIM_LDFLAGS        = -lgsrewrite -l$(ATERM) -lm -ldl

#xsim definitions
XSIM_NAME          = xsim
XSIM_OBJECTS       = xsim.o xsimbase.o xsimmain.o xsimtrace.o libgsnextstate.o libgsprover.o libprint_cxx.o libprint_c.o gsfunc.o gslowlevel.o
ifdef USE_WX
OBJECTS           += $(XSIM_OBJECTS)
endif
XSIM_LDFLAGS       = -lgsrewrite -l$(ATERM) -lm -ldl $(WX_LIBS)

#xsimtrace library definitions
XSIMTRACE_NAME     = xsimtrace.so
XSIMTRACE_OBJECTS  = xsimtracedll.o
ifdef USE_WX
OBJECTS           += $(XSIMTRACE_OBJECTS)
endif
ifeq ($(HOST_OS),MACOSX)
  XSIMTRACE_LDFLAGS = -bundle -undefined dynamic_lookup
else
  XSIMTRACE_LDFLAGS = -shared
endif

ifdef USE_BOOST
 # Boost library configuration
 ifneq ($(BOOST_PREFIX),)
  BOOST_HEADERS   = -I$(BOOST_PREFIX)/include
  BOOST_LIBRARIES = -L$(BOOST_PREFIX)/lib
 endif

 ifeq ($(BOOST_PREFIX),boost)
   BOOST_LIBRARIES += -static -lboost_program_options
 else
   BOOST_LIBRARIES += -lboost_program_options
 endif

 #lpeinfo definitions
 LPEINFO_NAME        = lpeinfo
 LPEINFO_OBJECTS     = gsfunc.o libgsrewrite.o gsrewr_inner.o gsrewr_inner2.o gsrewr_inner3.o gsrewr_innerc.o \
		       gsrewr_jitty.o gssubstitute.o libprint_c.o gslowlevel.o
 OBJECTS            += $(LPEINFO_OBJECTS)
 LPEINFO_LDFLAGS     = -lgsrewrite -l$(ATERM) -lm -ldl

 #lpconstelm definitions
 LPECONSTELM_NAME    = lpeconstelm
 LPECONSTELM_OBJECTS = gsfunc.o libgsrewrite.o gsrewr_inner.o gsrewr_inner2.o gsrewr_inner3.o gsrewr_innerc.o \
		       gsrewr_jitty.o gssubstitute.o libprint_c.o gslowlevel.o
 OBJECTS            += $(LPECONSTELM_OBJECTS)
 LPECONSTELM_LDFLAGS = -lgsrewrite -l$(ATERM) -lm -ldl
endif

#lperewr definitions
LPEREWR_NAME       = lperewr
LPEREWR_OBJECTS    = lperewr.o gsparser.o gslexer.o gstypecheck.o gsdataimpl.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(LPEREWR_OBJECTS)
LPEREWR_LDFLAGS    = -lgsrewrite -l$(ATERM) -lm -ldl

#lpe2lts definitions
LPE2LTS_NAME       = lpe2lts
LPE2LTS_OBJECTS    = lpe2lts.o libgsnextstate.o libgsprover.o gssubstitute.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(LPE2LTS_OBJECTS)
LPE2LTS_LDFLAGS    = -lgsrewrite -lsvc -l$(ATERM) -lm -ldl

#tbf2lpe definitions
TBF2LPE_NAME       = tbf2lpe
TBF2LPE_OBJECTS    = tbf2lpe.o lpetrans.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(TBF2LPE_OBJECTS)
TBF2LPE_LDFLAGS    = -lgsrewrite -l$(ATERM) -lm -ldl

#pnml2mcrl2 definitions
PNML2MCRL2_NAME    = pnml2mcrl2
PNML2MCRL2_OBJECTS = pnml2mcrl2.o gstypecheck.o libprint_c.o gsfunc.o gslowlevel.o
ifdef USE_XML2
OBJECTS           += $(PNML2MCRL2_OBJECTS)
endif
PNML2MCRL2_LDFLAGS = -lgsrewrite -l$(ATERM) -lxml2 -lm -ldl

#alpha definitions
ALPHA_NAME         = alpha
ALPHA_OBJECTS      = alpha.o libgsalpha.o gsparser.o gslexer.o gstypecheck.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(ALPHA_OBJECTS)
ALPHA_LDFLAGS      = -lgsrewrite -l$(ATERM) -lm -ldl

#lin definitions
LIN_NAME           = lin
LIN_OBJECTS        = lin.o lin_alt.o gsparser.o gslexer.o gstypecheck.o gsdataimpl.o libprint_c.o gsfunc.o gslowlevel.o
OBJECTS           += $(LIN_OBJECTS)
LIN_LDFLAGS        = -lgsrewrite -l$(ATERM) -lm -ldl

#Group definitions
EXE_NAMES          =  $(MCRL22LPE_NAME) $(LPEINFO_NAME) $(LPECONSTELM_NAME) $(LPEPP_NAME) $(LPE2LTS_NAME) $(SIM_NAME) $(XSIM_NAME) $(TBF2LPE_NAME) $(PNML2MCRL2_NAME) $(LPEREWR_NAME) $(ALPHA_NAME) $(LIN_NAME) 
LIB_NAMES          =  $(XSIMTRACE_NAME)
OBJECTS           := $(sort $(OBJECTS))

#Make rules
.PHONY: all install clean distclean
.PRECIOUS: gsparser.c gslexer.c

all : $(BJAM) $(EXE_NAMES) $(LIB_NAMES)

# Build bjam and boost libraries
boost/tools/build/jam_src/bin/bjam:
	$(MAKE) -C boost

install: all
	$(INSTALL) -d $(bindir)
	@for f in $(EXE_NAMES); do\
	  if test -f $$f; then\
	    c="$(INSTALL) $$f $(bindir)";\
	    echo $$c;\
	    $$c;\
	  fi;\
	done
ifdef USE_WX
ifeq ($(HOST_OS),MACOSX)
	/Developer/Tools/Rez -t APPL -o xsim sample.r
	/Developer/Tools/SetFile -a C xsim   
	mkdir -p ../xsim.app/Contents
	mkdir -p ../xsim.app/Contents/MacOS
	mkdir -p ../xsim.app/Contents/Resources
	cp xsim.plist ../xsim.app/Contents/Info.plist
	echo -n "APPL????" > ../xsim.app/Contents/PkgInfo
	cp xsim $(bindir)/xsim
	ln -f $(bindir)/xsim ../xsim.app/Contents/MacOS/xsim
	cp -f xsim.icns ../xsim.app/Contents/Resources/xsim.icns
endif
endif
	$(INSTALL) -d $(libdir)
	@for f in $(LIB_NAMES); do\
	  if test -f $$f; then\
	    c="$(INSTALL) $$f $(libdir)";\
	    echo $$c;\
	    $$c;\
	  fi;\
	done

clean :
	$(RM) $(EXE_NAMES) $(LIB_NAMES) *.o *.a *.d *.dpp aterm/*.o aterm/*.a aterm/*.d svc/*.o svc/*.a svc/*.d gslexer.c gsparser.c gsparser.h gsparser.output lpeinfo lpeconstelm config.status config.log *~ core core.*

distclean : clean
	$(MAKE) -C boost clean
	$(RM) -r autom4te.cache Makefile config gsrewr_innerc_aux.h
	$(RM) -rf boost/lib boost/tools/build/jam_src/bin*

$(ATERM_NAME): $(ATERM_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(ATERM_OBJECTS)

$(LIBSVC_NAME): $(LIBSVC_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(LIBSVC_OBJECTS)

$(LIBREWR_NAME) : $(LIBREWR_OBJECTS) $(ATERM_DEP)
	$(AR) $(ARFLAGS) $@ $(LIBREWR_OBJECTS)
#	$(CC) -shared -o $@ $(LIBREWR_OBJECTS)

$(MCRL22LPE_NAME) : $(MCRL22LPE_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(MCRL22LPE_OBJECTS) $(LDFLAGS) $(MCRL22LPE_LDFLAGS)

$(LPEPP_NAME) : $(LPEPP_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(LPEPP_OBJECTS) $(LDFLAGS) $(LPEPP_LDFLAGS)

$(SIM_NAME) : $(SIM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(SIM_OBJECTS) $(LDFLAGS) $(SIM_LDFLAGS)

ifdef USE_WX
$(XSIM_NAME): $(XSIM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(XSIM_OBJECTS) $(LDFLAGS) $(XSIM_LDFLAGS)

xsimtracedll.o: CXXFLAGS += -fPIC

$(XSIMTRACE_NAME): $(XSIMTRACE_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) -o $@ $(XSIMTRACE_OBJECTS) $(LDFLAGS) $(XSIMTRACE_LDFLAGS)
else
$(XSIM_NAME):
	@echo cannot make target $@ because the wxWidgets library cannot be used

$(XSIMTRACE_NAME):
	@echo cannot make target $@ because the wxWidgets library cannot be used
endif

# Targets that depend on any of the boost libraries
ifdef USE_BOOST
$(LPEINFO_NAME) : $(LPEINFO_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) $(CXXFLAGS) -ftemplate-depth-256 -o $@ lpe/lpeinfo.cpp $(BOOST_HEADERS) -I./ -Iaterm $(BOOST_LIBRARIES) $(LPEINFO_OBJECTS) $(LDFLAGS) $(LPEINFO_LDFLAGS)

$(LPECONSTELM_NAME) : $(LPECONSTELM_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CXX) $(CXXFLAGS) -ftemplate-depth-256 -o $@ lpe/lpeconstelm.cpp $(BOOST_HEADERS) -I./ -Iaterm $(BOOST_LIBRARIES) $(LPECONSTELM_OBJECTS) $(LDFLAGS) $(LPECONSTELM_LDFLAGS)
else
$(LPEINFO_NAME) :
	@echo "Missing Boost libraries so skipping build of lpeinfo."
$(LPECONSTELM_NAME) :
	@echo "Missing Boost libraries so skipping build of lpeconstelm."
endif

$(LPEREWR_NAME) : $(LPEREWR_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(LPEREWR_OBJECTS) $(LDFLAGS) $(LPEREWR_LDFLAGS)

$(LPE2LTS_NAME) : $(LPE2LTS_OBJECTS) $(ATERM_DEP) $(LIBSVC_NAME) $(LIBREWR_NAME)
	$(CC) -o $@ $(LPE2LTS_OBJECTS) $(LDFLAGS) $(LPE2LTS_LDFLAGS)

$(TBF2LPE_NAME) : $(TBF2LPE_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(TBF2LPE_OBJECTS) $(LDFLAGS) $(TBF2LPE_LDFLAGS)

ifdef USE_XML2
$(PNML2MCRL2_NAME) : $(PNML2MCRL2_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(PNML2MCRL2_OBJECTS) $(LDFLAGS) $(PNML2MCRL2_LDFLAGS)
else
$(PNML2MCRL2_NAME) :
	@echo cannot make target $@ because the xml2 library cannot be used
endif

$(ALPHA_NAME) : $(ALPHA_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(ALPHA_OBJECTS) $(LDFLAGS) $(ALPHA_LDFLAGS)

$(LIN_NAME) : $(LIN_OBJECTS) $(ATERM_DEP) $(LIBREWR_NAME)
	$(CC) -o $@ $(LIN_OBJECTS) $(LDFLAGS) $(LIN_LDFLAGS)

%.c : %.y
	$(BISON) $(BFLAGS) -o $@ $<

%.c : %.l
	$(LEX) $(LFLAGS) -o$@ $<

*.* aterm/*.* svc/*.* : Makefile

%.d : %.c
	@echo generating dependencies for $<
	@$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

%.dpp : %.cpp
	@echo generating dependencies for $<
	@$(CXX) -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

ifeq (,$(findstring $(MAKECMDGOALS),clean distclean))
-include $(foreach s,$(OBJECTS),$(shell if test -f $(basename $s).c; then echo -n $(basename $s).d; fi))
-include $(foreach s,$(OBJECTS),$(shell if test -f $(basename $s).cpp; then echo -n $(basename $s).dpp; fi))
endif

#Note: to make a shared version of the gsrewr library instead of a static one, do the following:
#- add the option `-fpic' to CFLAGS
#- change the `a' suffix to `so' in LIBREWR_NAME
#- in the rule with target $(LIBREWR_NAME), replace the command by
#    $(CC) -shared -o $@ $(LIBREWR_OBJECTS) $(LIBREWR_LDFLAGS)
#- extend the environment variable LD_LIBRARY_PATH with `.'

