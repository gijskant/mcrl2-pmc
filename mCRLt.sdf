definition

module mCRLt
exports
sorts 
	Name
	Data-term
	Rule
	Process-term
	Function-declaration
	Process-declaration
	Action-declaration
	Comm-declaration
	Specification
	MCRLtSpecification
lexical syntax
	[\t\n\ ]					-> LAYOUT
	"%" ~[\n]* [\n]					-> LAYOUT
	[a-zA-Z0-9\^\_\'\-]+				-> Name
context-free syntax
	"sort"						-> Name {reject}
	"func"						-> Name {reject}
	"map"						-> Name {reject}
	"comm"						-> Name {reject}
	"act"						-> Name {reject}
	"proc"						-> Name {reject}
	"init"						-> Name {reject}
	"rew"						-> Name {reject}
	"var"						-> Name {reject}

	"delta"						-> Name {reject}
	"tau"						-> Name {reject}
	"encap"						-> Name {reject}
	"hide"						-> Name {reject}
	"rename"					-> Name {reject}
	"sum"						-> Name {reject}
	
	"sort" Name+					-> Specification  {cons("SortDecl")}	
	"func" Function-declaration+			-> Specification  {cons("FuncDecl")}
	"map"  Function-declaration+			-> Specification  {cons("MapDecl")}
	"comm" Comm-declaration+			-> Specification  {cons("CommDecl")}
	"act"  Action-declaration+			-> Specification  {cons("ActionDecl")}
	"proc" Process-declaration+			-> Specification  {cons("ProcDecl")}
	"init" Process-term				-> Specification  {cons("InitDecl")}
	
	{ Name ","}+ ":" { Name "#"}+ "->" Name		-> Function-declaration  {cons("FuncType")}
	{ Name ","}+ ":" "->" Name			-> Function-declaration  {cons("FuncType")}
	
	"var" ({ Name ","}+ ":" Name)+ "rew" Rule+	-> Specification  {cons("Rewriting")}
	"rew" Rule+					-> Specification  {cons("Rewriting")}
	
	Data-term "=" Data-term				-> Rule  {cons("Rule")}
	
	Name						-> Data-term  {cons("DataTerm")}
	Name "(" {Data-term "," }+ ")"			-> Data-term  {cons("DataTerm")}
	
	Name "(" {Data-term "," }+ ")"			-> Process-term  {cons("act")}
	Name						-> Process-term  {cons("act")}
	"delta"						-> Process-term  {cons("del")}
	"tau"						-> Process-term  {cons("tau")}
	
	Process-term "+" Process-term			-> Process-term  {cons("plus"),right}
	Process-term "||" Process-term			-> Process-term  {cons("par"),right}
	Process-term "||_" Process-term			-> Process-term  {cons("mrg")}
	Process-term "|" Process-term			-> Process-term  {cons("comm"),right}
	Process-term "<|" Data-term "|>" Process-term	-> Process-term  {cons("ifthe")}
	Process-term "." Process-term			-> Process-term  {cons("seq"),right}
	Process-term "@" Data-term			-> Process-term  {cons("at")}
	Process-term "<<" Process-term			-> Process-term  {cons("bef"),left}
	"encap" "(" "{" { Name ","}+ "}" ","
		Process-term ")"			-> Process-term  {cons("enc")}
	"hide" "(" "{" { Name ","}+ "}" ","
		Process-term ")"			-> Process-term  {cons("hide")}
	"rename" "(" "{" { (Name "->" Name) "," }+ "}" ","
	     Process-term ")"				-> Process-term  {cons("ren")}
	"sum" "(" (Name ":" Name) "," Process-term ")"	-> Process-term  {cons("sum")}
	"(" Process-term ")"				-> Process-term  {bracket}	
	
	
	Name "(" { (Name ":" Name) ","}+ ")"
	     "=" Process-term				-> Process-declaration  {cons("ProcType")}
	Name "=" Process-term				-> Process-declaration  {cons("ProcType")}
	
	{ Name ","}+ ":" { Name "#"}+			-> Action-declaration  {cons("ActionType")}
	{ Name ","}+					-> Action-declaration  {cons("ActionType")}
	
	Name "|" Name "=" Name				-> Comm-declaration  {cons("CommType")}	

	Specification+					-> MCRLtSpecification {cons("Spec")}

%%context-free start-symbols
%%	Specification

%%context-free priorities
%%	  Process-term "@" Data-term -> Process-term  {cons("at")}
%%	> Process-term "." Process-term -> Process-term {cons("seq"),right}
%%	> Process-term "<<" Process-term -> Process-term {cons("bef"),left}
%%	>
%%	{
%%		Process-term "||" Process-term -> Process-term {cons("par"),right}
%%		Process-term "|" Process-term -> Process-term {cons("comm"),right}
%%		Process-term "||_" Process-term -> Process-term {cons("mrg")} 
%%	}
%%	> Process-term "<|" Data-term "|>" Process-term -> Process-term {cons("if")}
%%	> Process-term "+" Process-term -> Process-term {cons("plus"),right}

