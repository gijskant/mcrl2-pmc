project libraries ;

# returns the list of mcrl2 library components
rule mcrl2-library-components ( ) {
  return aterm atermpp svc core data utilities lps lts trace pbes ;
}

for library in [ mcrl2-library-components ] {
  alias $(library) :
       : <link>shared:<source>/libraries//mcrl2/<link>shared
         <link>static:<source>/libraries/$(library)//$(library)/<link>static ;
}
for library in gl2ps ticpp tr {
  alias $(library) : /libraries/$(library)//$(library) ;
}

# Target for a library that is part of the collective mcrl2 library when link=shared
rule mcrl2-library ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  import property ;
  import feature ;
  import set ;

  local mcrl2-components = [ mcrl2-library-components ] ;

  local c = [ project.current ] ;
  local m = [ $(c).project-module ] ;

  module [ $(c).project-module ] {
    import property ;

    rule object-targets ( sources * : requirements * : defaults * : usage-requirements * )  {
      local targets = ;

      for local source in $(sources) {
        local additional-requirements = [ MATCH .*/(<[^>]*>.*)?$ : $(source) ] ;

        if $(additional-requirements) {
          source = [ MATCH (.*)/<?[^>]*>?.*$ : $(source) ] ;
        }

        obj $(source:B).o : $(source) : $(additional-requirements) $(requirements) : $(defaults) : $(usage-requirements) ;

        targets += $(source:B).o ;
      }

      return $(targets) ;
    }

    rule library-targets-static ( name : sources * : requirements * : defaults * : usage-requirements * ) {
      usage-requirements += [ property.select library : $(requirements) ] ;

      if $(sources) {
        lib $(name) : $(sources) : <link>static : $(defaults) : $(usage-requirements) ;
      }
      else {
        alias $(name) : : <link>static : : $(usage-requirements) ;
      }
    }

    rule library-targets-dynamic ( name : sources * : requirements * : defaults * : usage-requirements * ) {
      if $(sources) {
        alias $(name).inline : $(sources) : : : $(usage-requirements) ;
      }
      else {
        alias $(name).inline : : <link>shared ;
      }

      alias $(name) : : <link>shared : : $(usage-requirements) $(requirements) ;
    }
  }

  local install-requirements = [ property.select install-dependency : $(requirements) ] ;

  requirements = [ property.remove install-dependency : $(requirements) ] ;

  local internal-libraries   = [ MATCH (/libraries.*//$(mcrl2-components)) : [ feature.get-values library : $(requirements) ] ] ;
  local internal-uses        = [ MATCH (/libraries.*//.*) : $(internal-libraries) ] ;

  requirements  = [ set.difference $(requirements) : <library>$(internal-libraries) ] ;

  local requirements-shared = $(requirements) ;
  local requirements-static = $(requirements) ;
  local requirements-object = $(requirements) ;

  for local u in [ MATCH /libraries.*//(.*) : $(internal-uses) ] {
    requirements-shared += <use>/libraries/$(u)//$(u)/<link>shared ;
    requirements-static += <library>/libraries/$(u)//$(u)/<link>static ;
    requirements-object += <use>/libraries/$(u)//$(u) ;
  }

  objects = [ modules.call-in $(m) : object-targets $(sources) : $(requirements-object) ] ;

  modules.call-in $(m) : library-targets-static  $(name) : $(objects) : $(requirements-static) : $(defaults) : $(usage-requirements) ;
  modules.call-in $(m) : library-targets-dynamic $(name) : $(objects) : $(requirements-shared) : $(defaults) : $(usage-requirements) ;

  install-libraries $(name) : $(install-requirements) ;
}

rule mcrl2-library-targets ( properties * ) {
  local targets ;

  if <link>shared in $(properties) {
    for local library in [ mcrl2-library-components ] {
      targets += <source>/libraries/$(library)//$(library).inline ;
    }
  }

  return $(targets) ;
}

local libraries = [ MATCH (.*)/build/.* : [ glob-tree Jamfile.v2 : .svn ] ] ;

# Shared build large large mcrl2 library
lib mcrl2
        :
        : <link>shared
          <conditional>@mcrl2-library-targets
        ;

install-mcrl2-library
          <dependency>/libraries/$(libraries)//install
          <dependency>/libraries/tipi//install
          <dependency>/libraries/aterm//install
        ;

IMPORT $(__name__) : mcrl2-library-components
                     mcrl2-library-targets
                     mcrl2-library
                 : : mcrl2-library-components
                     mcrl2-library-targets
                     mcrl2-library
                   ;
