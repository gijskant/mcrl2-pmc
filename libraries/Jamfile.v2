import feature ;
import property ;
import set ;

project libraries ;

local libraries = [ MATCH .*/libraries/(.*)/build/.* : [ glob-tree Jamfile.v2 ] ] ;

# Register library projects
for library in $(libraries) {
  use-project /libraries/$(library) : $(TOP)/libraries/$(library)/build ;
}

# Additional library
use-project /libraries/tipi : ../tools/squadt/libraries/tipi/build ;

# some 3rd-party libraries
for library in aterm ticpp svc tr {
  use-project /libraries/$(library) : $(TOP)/3rd-party/$(library)/build ;
}

local mcrl2-libraries = lps pbes lts svc aterm data core trace utilities ;

for library in $(libraries) aterm ticpp svc tr {
  if $(library) in $(mcrl2-libraries) {
    alias $(library) : /libraries//mcrl2 : <link>shared ;
    alias $(library) : /libraries/$(library)//$(library)/<link>static : <link>static ;
  }
  else {
    alias $(library) : /libraries/$(library)//$(library) ;
  }
}

# returns the list of mcrl2 library components
rule mcrl2-library-components ( ) {
  local components = aterm atermpp svc core data utilities lps lts trace pbes ;

  return $(components) ;
}

# Target for a library that is part of the collective mcrl2 library when link=shared
rule mcrl2-library ( name : sources * : requirements * : defaults * : usage-requirements * ) {
  local install-requirements = [ property.select install-dependency : $(requirements) ] ;
  local mcrl2-components     = [ mcrl2-library-components ] ;

  requirements = [ property.remove install-dependency : $(requirements) ] ;

  local internal-libraries   = [ MATCH (/libraries.*//$(mcrl2-components)) : [ feature.get-values library : $(requirements) ] ] ;
  local internal-uses        = [ MATCH /libraries.*//(.*) : $(internal-libraries) ] ;
  local shared-requirements  = [ set.difference $(requirements) : <library>$(internal-libraries) ] ;
  local shared-uses          = ;

  for local u in $(internal-uses) {
    shared-uses += <use>/libraries/$(u)//$(u)/<link>shared ;
  }

  if $(sources) {
    # static library target
    lib $(name) : $(sources) : <link>static $(requirements) : $(defaults) : $(usage-requirements) ;

    alias $(name) : : <link>shared : : $(usage-requirements) $(shared-uses) ;
    alias $(name).inline : $(sources) : <link>shared $(shared-requirements) : $(defaults) : $(usage-requirements) ;
  }
  else {
    alias $(name) : : : : <link>static:$(requirements) $(usage-requirements) $(shared-uses) ;
    alias $(name).inline ;
  }

  install-libraries $(name) : $(install-requirements) ;

  local c = [ project.current ] ;

  module [ $(c).project-module ] {
    explicit $(1) $(1).inline ;
  }
}

rule mcrl2-library-targets ( properties * ) {
  local targets ;

  if <link>shared in $(properties) {
    for local library in [ mcrl2-library-components ] {
      targets += <source>/libraries/$(library)//$(library).inline ;
    }
  }

  return $(targets) ;
}

# Shared build large large mcrl2 library
lib mcrl2
        :
        : <link>shared
          <conditional>@mcrl2-library-targets
          <toolset>darwin:<cflags>"-fPIC -fno-common"
          <toolset>darwin:<cxxflags>"-fPIC -fno-common"
          <toolset>darwin:<linkflags>"-undefined dynamic_lookup"
        ;

alias install : /libraries/$(libraries)//install /libraries/aterm//install ;

IMPORT $(__name__) : mcrl2-library-components
                     mcrl2-library-targets  
                     mcrl2-library
                 : : mcrl2-library-components
                     mcrl2-library-targets
                     mcrl2-library
                   ;
