[library Utilities Library
    [quickbook 1.4]
    [authors [Wesselink, Wieger]]
    [copyright 2008-2009 Technische Universiteit Eindhoven]
    [category string-text]
    [purpose
        The mCRL2 Utilities Library contains utility functions
        for the mCRL2 toolset.
    ]
]

[/  Images   ]
[def __note__              [$images/note.png]]
[def __alert__             [$images/caution.png]]
[def __detail__            [$images/note.png]]
[def __tip__               [$images/tip.png]]

[/  Links   ]
[def __mcrl2__          [@http://mcrl2.org mCRL2]]
[def __cli_library__    [@http://www.mcrl2.org/mcrl2/wiki/index.php/CLI_sublibrary Command Line Interface Library]]
[def __squadt_library__ [@http://www.mcrl2.org/mcrl2/wiki/index.php/User_manual/squadt Squadt Library]]

[section: Tool classes]
To simplify the creation of a tool, a number of tool classes is available in the
Utilities Library. They all inherit from the class `tool`, and they can be found
in the namespace `utilities::tools`. The main purpose of the tool classes is to
standardize the behavior of tools. Tool classes use the __cli_library__ for
handling command line arguments. The table below gives an overview of the
available tool classes, and the command line options that they handle.
                           
[table Tool classes and their supported command line arguments
    [[tool class] [command line arguments]]
    [ [=class tool=][ handles =--quiet=, =--verbose=, =--debug=, =--help= and =--version=]]
    [ [=class input_tool=][ in addition handles a positional input file argument]]
    [ [=class input_output_tool=][ in addition handles a positional output file argument]]
    [ [=template <typename Tool> class rewriter_tool=] [extends a tool with a =--rewriter= option]]
    [ [=template <typename Tool> class pbes_rewriter_tool=] [extends a tool with =--rewriter= and =--pbes-rewriter= options]]
]
                                                                                 
The =--rewriter= option makes strategies of the data rewriter
available to the user. The class =pbes_rewriter_tool= makes pbes rewriters
available to the user.
                                                           
[section: Example]
Below an example is given for the pbesparelm tool. Since this is a tool that
takes a file as input and also writes output to a file, it derives from the
class =input_output_tool=.

[import ../../../tools/pbesparelm/pbesparelm.cpp]
[pbes_parelm_tool]

The following help message is produced for the tool:
[pre
Usage: pbesparelm [OPTION\]... [INFILE [OUTFILE\]\]
Reads a file containing a PBES, and applies parameter elimination to it. If 
OUTFILE is not present, standard output is used. If INFILE is not present,     
standard input is used.
]

[note Output of a tool is written to `std::clog`. It should never be written
to `std::cout`, since this prevents the usage of a tool in piping commands.
]

[endsect] [/ Example]

[section Tool properties]
A tool has several properties, as given in the table below. For each of them a
setter and a getter is defined, with the same name as the property. The synopsis 
has a suitable default value, and the other properties have to be set via the
constructor.

[table Tool properties
    [[property] [meaning]]
    [ [ name        ][ Name of the tool ]]
    [ [ author      ][ Author(s) of the tool ]]
    [ [ what_is     ][ One-line description of the tool ]]
    [ [ description ][ Description of the tool ]]
    [ [ synopsis    ][ Summary of the command-line syntax ]]
]

[endsect] [/ Tool properties]

[section Creating a tool]
To create a new tool, the following needs to be done:

[h5 1) Set some parameters in the constructor]
In the constructor of a tool, one has to supply a name for the tool,
an author and a description:

[import ../../../libraries/utilities/example/tool_declaration.cpp]
[tool_declaration]

[h5 2) Override the `run` member function]
The actual execution of the tool happens in the virtual member function =run=.
The developer has to override this function to add the behavior of the tool
The =run= function is called from the =execute= member function, after the
command line parameters have been parsed.

[h5 3) Optionally add additional command line arguments]
Additional command line arguments can be specified by overriding the virtual
methods =parse_options= and =add_options=:

[import ../../../tools/pbesconstelm/pbesconstelm.cpp]
[pbes_constelm_tool]

[h5 4) Optionally use a rewriter]

If a tool needs a rewriter for data expressions, one should use the
`rewriter_tool` class. A declaration could look like this:

  class my_tool: public rewriter_tool<input_output_tool>

This allows the user to specify a rewrite strategy on the command line.
A function `create_rewriter` is available to construct a rewriter.

If a tool needs a rewriter for PBES expressions, one should use the
`pbes_rewriter_tool` class. A declaration could look like this:

  class my_tool: public pbes_rewriter_tool<input_output_tool>

By default a selection of the available PBES rewriters is available on the
command line. By overriding the method =available_rewriters= one can change
this selection.

If a tool needs both a data and a PBES rewriter, one can use the nested
construction that is used in the pbesconstelm example above.

[endsect] [/ Creating a tool]

[section Creating a squadt user interface]
For several tools a graphical user interface is available, based on the
__squadt_library__.
The preferred way to add a squadt user interface to a tool is to define a
class that derives from the `tool` class, and from the class `squadt::mcrl2_tool_interface`.
In this class one has to override the four methods `set_capabilities`,
`user_interactive_configuration`, `check_configuration` and `perform_task`. All squadt
related code has to made conditional using the flag `ENABLE_SQUADT_CONNECTIVITY`.
An example is given below:

[import ../../../tools/pbes2bes/pbes2bes.cpp]
[pbes2bes_tool]

[note When running a tool in squadt, typically no command line parameters are
supplied. All options of the tool must therefore be set manually. This typically
is done in the function `perform_task`.
]

[endsect] [/ Creating a squadt user interface]

[endsect]
