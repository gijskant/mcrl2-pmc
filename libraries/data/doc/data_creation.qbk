[section: Creating data expressions]

This section describes how to create data expressions.
Data expressions and sort expressions can be created using a parser,
or directly using constructors.

[h6 Parsing data expressions]
There is a parser available for linear process specifications
(see the __lps_library__). A linear process specification
contains a data specification. To parse a data specification, it
has to be embedded in a linear process specification.

[h6 Constructing data expressions]
An example of constructing data expressions is given below.

    sort_identifier X("X");
    sort_identifier Y("Y");
    sort_identifier Z("Z");
    sort_expression XY   = sort_arrow(X, Y);
    sort_expression XYZ  = sort_arrow(XY, Z); 
    data_variable x("x", X);
    data_variable three("3", pos());
    data_variable zero("0", nat());
    data_expression e = x;
    data_expression F = false_();

The functions `int_` [footnote If a function name clashes with a `C++` keyword,
a trailing underscore is added.], `nat`, `pos` and `real` return predefined sorts
for types integer, natural number, positive natural number and real
respectively. The functions `true_` and `false_` return predefined
boolean data expressions representing true and false.

[endsect] [/ Creating data expressions]
