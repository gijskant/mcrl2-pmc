#line 2 "mcrl2lexer.cpp"

#line 4 "mcrl2lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer mcrl2yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *mcrl2yyalloc (yy_size_t  );
void *mcrl2yyrealloc (void *,yy_size_t  );
void mcrl2yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[268] =
    {   0,
        0,    0,   96,   94,    1,    2,   94,   36,   38,    3,
       94,   40,   41,   27,   28,   32,   29,   31,   93,   93,
       33,   34,   45,   30,   46,   35,   37,   92,   92,   92,
       92,   92,   92,   92,   92,   43,   44,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   48,   39,   49,   94,    2,
       21,    3,   22,   19,   14,   93,   25,   15,   26,   18,
       20,   24,   16,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   42,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   72,   92,   92,   92,   87,

       92,   88,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   47,   17,   23,    0,   67,   92,   63,
       92,   62,   61,   92,   66,   55,   92,   92,   92,   92,
       92,   70,   77,   54,   92,   92,   92,   92,   92,   92,
       52,   71,   91,   92,   92,   92,   92,   92,   80,   79,
       92,   86,   53,   76,   92,   13,    0,    0,    0,    0,
        0,   60,   65,   64,   92,   92,   85,   51,   92,   92,
       92,   92,   92,   83,   58,   92,   57,   56,   92,   50,
       92,   68,   92,    0,    0,    0,    0,    0,    0,    0,
       82,   81,   89,   78,   92,   69,   92,   92,   92,   92,

       90,    0,    0,    0,    0,    0,    0,    0,   75,   74,
       73,   84,   59,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    5,    6,   12,    8,    9,
        4,   10,    0,    0,    0,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   26,   26,
       26,   26,   28,   26,   26,   29,   26,   30,   26,   31,
       26,   32,   33,   26,   26,   26,   26,   26,   26,   26,
       34,    1,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   26,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   26,   61,   62,   63,    1,    1,   64,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   65,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[270] =
    {   0,
        0,    0,  277,  278,  278,  278,  273,  253,  278,    0,
      266,  278,  278,  278,  260,  278,  249,  278,  278,   49,
      278,  278,   47,   49,  249,  278,  278,    0,   36,  221,
      224,  231,  217,  225,  224,  229,  278,   35,  216,  212,
       34,   28,   39,  216,  211,  222,   41,   36,   45,  217,
       38,   47,  220,  212,  218,  191,   62,  278,  189,  278,
      278,    0,  278,  278,  278,   78,  278,  278,  278,  278,
      278,  278,  278,    0,  209,  201,  195,  195,  193,  193,
      209,  190,  278,  189,  196,  192,   53,  194,  183,  199,
      189,  192,  189,  182,  194,  188,  184,  180,  190,    0,

      182,    0,  187,  177,  177,  172,  171,  175,  166,  165,
       52,  167,  172,  278,  278,  182,   66,    0,  170,    0,
      161,    0,    0,  168,    0,    0,  164,  174,  164,  157,
       53,    0,    0,    0,  156,  155,  171,  166,  151,  167,
        0,    0,    0,  150,  164,  165,  146,  144,    0,    0,
      158,    0,    0,    0,  157,  278,  158,  159,  139,   66,
       57,    0,    0,    0,  136,  147,    0,    0,  132,  154,
      135,  148,  141,    0,    0,  147,    0,    0,  138,    0,
      146,    0,  144,  128,  127,  134,  139,  129,  125,  140,
        0,    0,    0,    0,  122,    0,  128,  137,  132,  117,

        0,  126,  133,  114,  114,  128,  111,  110,    0,    0,
        0,    0,    0,  114,  127,  126,  125,  124,  123,  117,
      108,   69,  119,  101,   72,  113,  117,  116,   92,   99,
      110,   97,   88,   95,   86,  102,   90,   91,  100,   85,
       98,   87,   96,   85,   82,   93,   80,   93,  278,   92,
       77,   89,   72,   74,   72,  278,  278,  278,  278,  278,
      278,  278,   81,   68,   74,  278,  278,  126,  108
    } ;

static yyconst flex_int16_t yy_def[270] =
    {   0,
      267,    1,  267,  267,  267,  267,  267,  267,  267,  268,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  269,  269,  269,
      269,  269,  269,  269,  269,  267,  267,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  267,  267,  267,  267,  267,
      267,  268,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  267,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  267,  267,  267,  267,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  267,  267,  267,  267,  267,
      267,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  267,  267,  267,  267,  267,  267,  267,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  267,  267,  267,  267,  267,  267,  267,  269,  269,
      269,  269,  269,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,    0,  267,  267
    } ;

static yyconst flex_int16_t yy_nxt[344] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   28,   38,   39,   40,   41,
       42,   43,   28,   44,   45,   28,   46,   47,   48,   28,
       49,   28,   50,   51,   52,   28,   53,   54,   28,   55,
       56,   57,   58,    4,   59,   66,   66,   67,   68,   69,
       71,   72,   75,   84,   88,   93,   90,   98,   89,   91,
      101,   85,  103,  109,  115,   76,   92,  106,   94,  169,
       99,  102,  107,  108,   66,   66,  100,  104,  152,  110,

      129,  130,  157,  187,  153,  158,  189,  170,   70,  229,
       74,  190,  233,  159,  266,  265,  160,  264,  188,  161,
      263,  262,  230,  116,  261,  234,   62,  260,   62,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  232,  231,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  186,  185,  184,  183,  182,  181,

      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      168,  167,  166,  165,  164,  163,  162,  156,  155,  154,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  137,  136,  135,  134,  133,  132,
      131,  128,  127,  126,  125,  124,  123,  122,  121,  120,
      119,  118,  117,  114,  113,  112,  111,  105,   97,   96,
       95,   87,   86,   83,   82,   81,   80,   79,   78,   77,
       73,   65,   64,   63,   61,   60,  267,    3,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267
    } ;

static yyconst flex_int16_t yy_chk[344] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   20,   20,   23,   23,   23,
       24,   24,   29,   38,   41,   43,   42,   47,   41,   42,
       48,   38,   49,   52,   57,   29,   42,   51,   43,  131,
       47,   48,   51,   51,   66,   66,   47,   49,  111,   52,

       87,   87,  117,  160,  111,  117,  161,  131,   23,  222,
      269,  161,  225,  117,  265,  264,  117,  263,  160,  117,
      255,  254,  222,   57,  253,  225,  268,  252,  268,  251,
      250,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  224,  223,  221,  220,  219,  218,
      217,  216,  215,  214,  208,  207,  206,  205,  204,  203,
      202,  200,  199,  198,  197,  195,  190,  189,  188,  187,
      186,  185,  184,  183,  181,  179,  176,  173,  172,  171,
      170,  169,  166,  165,  159,  158,  157,  155,  151,  148,

      147,  146,  145,  144,  140,  139,  138,  137,  136,  135,
      130,  129,  128,  127,  124,  121,  119,  116,  113,  112,
      110,  109,  108,  107,  106,  105,  104,  103,  101,   99,
       98,   97,   96,   95,   94,   93,   92,   91,   90,   89,
       88,   86,   85,   84,   82,   81,   80,   79,   78,   77,
       76,   75,   59,   56,   55,   54,   53,   50,   46,   45,
       44,   40,   39,   36,   35,   34,   33,   32,   31,   30,
       25,   17,   15,   11,    8,    7,    3,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "mcrl2lexer.ll"
#line 2 "mcrl2lexer.ll"
// Author(s): Aad Mathijssen
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
/// \file mcrl2lexer.ll

#include <cstring>
#include <cstdio>
#include "mcrl2/core/detail/mcrl2lexer.h"
#include "mcrl2/core/detail/mcrl2parser.hpp"
#include "mcrl2/core/detail/struct.h"
#include "mcrl2/core/messaging.h"

//fix for the broken cygwin versions of flex
#ifdef __CYGWIN__
#include <iostream>
using std::cerr;
using std::cin;
using std::cout;
#endif

using namespace mcrl2::utilities;
using namespace mcrl2::core;

//fix for newer versions of flex (>= 2.5.31)
#ifndef yywrap
#define yywrap mcrl2yywrap
#endif

//Global precondition: the ATerm library has been initialised

//external declarations
int mcrl2yyparse(void);          /* declared in mcrl2parser.cpp */
extern YYSTYPE mcrl2yylval;      /* declared in mcrl2parser.cpp */
extern int mcrl2yydebug;         /* declared in mcrl2parser.cpp */

//global declarations, used by mcrl2parser.cpp
int  mcrl2yylex(void);           /* lexer function */
void mcrl2yyerror(const char *s);/* error function */
extern "C" int mcrl2yywrap(void);/* wrap function */
//Note: C linkage is needed for older versions of flex (2.5.4)
ATermAppl spec_tree = NULL;      /* the parse tree */
ATermIndexedSet parser_protect_table = NULL; /* table to protect parsed ATerms */

//local declarations
class mcrl2_lexer : public mcrl2yyFlexLexer {
public:
  mcrl2_lexer(void);             /* constructor */
  int yylex(void);               /* the generated lexer function */
  void yyerror(const char *s);   /* error function */
  int yywrap(void);              /* wrap function */
  ATermAppl parse_streams(std::vector<std::istream*> &streams);
protected:
  std::vector<std::istream*> *cur_streams;/* current input streams */
  int cur_index;                 /* current index in current streams */
  int line_nr;                   /* line number in cur_streams[cur_index] */
  int col_nr;                    /* column number in cu_streams[cur_index] */
  void process_string(void);     /* update position, provide token to parser */
};

//implement yylex in mcrl2_lexer instead of mcrl2yyFlexLexer
//(this gets rid of global variables but is ugly in its own right)
#define YY_DECL int mcrl2_lexer::yylex()
int mcrl2yyFlexLexer::yylex(void) { return 1; }

mcrl2_lexer *lexer = NULL;       /* lexer object, used by parse_streams */

#line 642 "mcrl2lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 79 "mcrl2lexer.ll"


#line 745 "mcrl2lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 268 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 278 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 81 "mcrl2lexer.ll"
{ col_nr += YYLeng(); /* whitespace */ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 83 "mcrl2lexer.ll"
{ line_nr++; col_nr = 1; /* newline */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "mcrl2lexer.ll"
{ col_nr += YYLeng(); /* comment */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 87 "mcrl2lexer.ll"
{ process_string(); return TAG_SORT_EXPR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "mcrl2lexer.ll"
{ process_string(); return TAG_DATA_EXPR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "mcrl2lexer.ll"
{ process_string(); return TAG_DATA_SPEC; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "mcrl2lexer.ll"
{ process_string(); return TAG_MULT_ACT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 91 "mcrl2lexer.ll"
{ process_string(); return TAG_PROC_EXPR; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "mcrl2lexer.ll"
{ process_string(); return TAG_PROC_SPEC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "mcrl2lexer.ll"
{ process_string(); return TAG_STATE_FRM; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "mcrl2lexer.ll"
{ process_string(); return TAG_ACTION_RENAME; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "mcrl2lexer.ll"
{ process_string(); return TAG_PBES_SPEC; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "mcrl2lexer.ll"
{ process_string(); return LMERGE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "mcrl2lexer.ll"
{ process_string(); return ARROW; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "mcrl2lexer.ll"
{ process_string(); return LTE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "mcrl2lexer.ll"
{ process_string(); return GTE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "mcrl2lexer.ll"
{ process_string(); return CONS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "mcrl2lexer.ll"
{ process_string(); return SNOC; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "mcrl2lexer.ll"
{ process_string(); return CONCAT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "mcrl2lexer.ll"
{ process_string(); return EQ; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "mcrl2lexer.ll"
{ process_string(); return NEQ; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "mcrl2lexer.ll"
{ process_string(); return AND; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "mcrl2lexer.ll"
{ process_string(); return BARS; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "mcrl2lexer.ll"
{ process_string(); return IMP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "mcrl2lexer.ll"
{ process_string(); return BINIT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "mcrl2lexer.ll"
{ process_string(); return ELSE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "mcrl2lexer.ll"
{ process_string(); return STAR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "mcrl2lexer.ll"
{ process_string(); return PLUS; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "mcrl2lexer.ll"
{ process_string(); return MINUS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "mcrl2lexer.ll"
{ process_string(); return EQUALS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 115 "mcrl2lexer.ll"
{ process_string(); return DOT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "mcrl2lexer.ll"
{ process_string(); return COMMA; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "mcrl2lexer.ll"
{ process_string(); return COLON; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "mcrl2lexer.ll"
{ process_string(); return SEMICOLON; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "mcrl2lexer.ll"
{ process_string(); return QMARK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "mcrl2lexer.ll"
{ process_string(); return EXCLAM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "mcrl2lexer.ll"
{ process_string(); return AT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "mcrl2lexer.ll"
{ process_string(); return HASH; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "mcrl2lexer.ll"
{ process_string(); return BAR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "mcrl2lexer.ll"
{ process_string(); return LPAR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "mcrl2lexer.ll"
{ process_string(); return RPAR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 126 "mcrl2lexer.ll"
{ process_string(); return PBRACK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "mcrl2lexer.ll"
{ process_string(); return LBRACK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "mcrl2lexer.ll"
{ process_string(); return RBRACK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "mcrl2lexer.ll"
{ process_string(); return LANG; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "mcrl2lexer.ll"
{ process_string(); return RANG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "mcrl2lexer.ll"
{ process_string(); return PBRACE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "mcrl2lexer.ll"
{ process_string(); return LBRACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "mcrl2lexer.ll"
{ process_string(); return RBRACE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "mcrl2lexer.ll"
{ process_string(); return KWSORT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "mcrl2lexer.ll"
{ process_string(); return KWCONS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 137 "mcrl2lexer.ll"
{ process_string(); return KWMAP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 138 "mcrl2lexer.ll"
{ process_string(); return KWVAR; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 139 "mcrl2lexer.ll"
{ process_string(); return KWEQN; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 140 "mcrl2lexer.ll"
{ process_string(); return KWACT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 141 "mcrl2lexer.ll"
{ process_string(); return KWPROC; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 142 "mcrl2lexer.ll"
{ process_string(); return KWPBES; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 143 "mcrl2lexer.ll"
{ process_string(); return KWINIT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 145 "mcrl2lexer.ll"
{ process_string(); return KWSTRUCT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "mcrl2lexer.ll"
{ process_string(); return BOOL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 147 "mcrl2lexer.ll"
{ process_string(); return POS; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 148 "mcrl2lexer.ll"
{ process_string(); return NAT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "mcrl2lexer.ll"
{ process_string(); return INT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "mcrl2lexer.ll"
{ process_string(); return REAL; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 151 "mcrl2lexer.ll"
{ process_string(); return LIST; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 152 "mcrl2lexer.ll"
{ process_string(); return SET; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 153 "mcrl2lexer.ll"
{ process_string(); return BAG; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 155 "mcrl2lexer.ll"
{ process_string(); return CTRUE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 156 "mcrl2lexer.ll"
{ process_string(); return CFALSE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 157 "mcrl2lexer.ll"
{ process_string(); return DIV; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 158 "mcrl2lexer.ll"
{ process_string(); return MOD; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 159 "mcrl2lexer.ll"
{ process_string(); return IN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 160 "mcrl2lexer.ll"
{ process_string(); return LAMBDA; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 161 "mcrl2lexer.ll"
{ process_string(); return FORALL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 162 "mcrl2lexer.ll"
{ process_string(); return EXISTS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 163 "mcrl2lexer.ll"
{ process_string(); return WHR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 164 "mcrl2lexer.ll"
{ process_string(); return END; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 166 "mcrl2lexer.ll"
{ process_string(); return DELTA; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 167 "mcrl2lexer.ll"
{ process_string(); return TAU; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 168 "mcrl2lexer.ll"
{ process_string(); return SUM; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 169 "mcrl2lexer.ll"
{ process_string(); return BLOCK; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 170 "mcrl2lexer.ll"
{ process_string(); return ALLOW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 171 "mcrl2lexer.ll"
{ process_string(); return HIDE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 172 "mcrl2lexer.ll"
{ process_string(); return RENAME; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 173 "mcrl2lexer.ll"
{ process_string(); return COMM; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 175 "mcrl2lexer.ll"
{ process_string(); return VAL; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 176 "mcrl2lexer.ll"
{ process_string(); return MU; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 177 "mcrl2lexer.ll"
{ process_string(); return NU; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "mcrl2lexer.ll"
{ process_string(); return DELAY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "mcrl2lexer.ll"
{ process_string(); return YALED; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "mcrl2lexer.ll"
{ process_string(); return NIL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 182 "mcrl2lexer.ll"
{ process_string(); return ID; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 184 "mcrl2lexer.ll"
{ process_string(); return NUMBER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 186 "mcrl2lexer.ll"
{ 
             col_nr += YYLeng(); yyerror("unknown character");
             /* remaining characters */
	   }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 191 "mcrl2lexer.ll"
ECHO;
	YY_BREAK
#line 1307 "mcrl2lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mcrl2yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 268 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 268 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 267);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mcrl2yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mcrl2yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mcrl2yyfree((void *) b->yy_ch_buf  );

	mcrl2yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)mcrl2yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)mcrl2yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) mcrl2yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) mcrl2yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	mcrl2yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	mcrl2yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mcrl2yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *mcrl2yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mcrl2yyfree (void * ptr )
{
	free( (char *) ptr );	/* see mcrl2yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 191 "mcrl2lexer.ll"



//Implementation of parse_streams

ATermAppl parse_streams(std::vector<std::istream*> &streams) {
  lexer = new mcrl2_lexer();
  ATermAppl result = lexer->parse_streams(streams);
  delete lexer;
  return result;
}


//Implementation of global functions

int mcrl2yylex(void) {
  return lexer->yylex();
}

void mcrl2yyerror(const char *s) {
  return lexer->yyerror(s);
}

int mcrl2yywrap(void) {
  return lexer->yywrap();
}


//Implementation of mcrl2_lexer

mcrl2_lexer::mcrl2_lexer(void) : mcrl2yyFlexLexer(NULL, NULL) {
  line_nr = 1;
  col_nr = 1;
  cur_streams = NULL;
  cur_index = -1;
}

void mcrl2_lexer::yyerror(const char *s) {
  int oldcol_nr = col_nr - YYLeng();
  if (oldcol_nr < 0) {
    oldcol_nr = 0;
  }
  gsErrorMsg(
    "token '%s' at position %d, %d caused the following error: %s\n", 
    YYText(), line_nr, oldcol_nr, s
  ); 
}

int mcrl2_lexer::yywrap(void) {
  if (cur_streams == NULL) {
    return 1;
  }
  //SpecStreams != NULL
  if (!(cur_index >= 0 && cur_index < (int) cur_streams->size()-1)) {
    return 1;
  }
  //0 <= cur_index < cur_streams->size()-1
  line_nr = 1;
  col_nr = 1;
  cur_index++;
  switch_streams((*cur_streams)[cur_index], NULL);
  return 0;
}

void mcrl2_lexer::process_string(void) {
  col_nr += YYLeng();
  mcrl2yylval.appl = gsString2ATermAppl(YYText());
}

ATermAppl mcrl2_lexer::parse_streams(std::vector<std::istream*> &streams) {
  //uncomment the line below to let bison generate debug information 
  //mcrl2yydebug = 1;
  ATermAppl result = NULL;
  if (streams.size() == 0) {
    return result;
  }
  //streams.size() > 0
  spec_tree = NULL;
  ATprotectAppl(&spec_tree);
  parser_protect_table = ATindexedSetCreate(10000, 50);
  line_nr = 1;
  col_nr = 1;
  cur_index = 0;
  cur_streams = &streams;
  switch_streams((*cur_streams)[0], NULL);
  if (mcrl2yyparse() != 0) {
    result = NULL;
  } else {
    //spec_tree contains the parsed specification
    result = spec_tree;
    spec_tree = NULL;
  }
  ATindexedSetDestroy(parser_protect_table);
  ATunprotectAppl(&spec_tree);
  return result;
}

