[chapter Traversal Framework
    [quickbook 1.4]
    [authors [Wesselink, Wieger]]
    [copyright 2005-2011 Technische Universiteit Eindhoven]
]

[section:introduction Introduction]

The Traversal Framework is a collection of classes that support traversal over hierarchical
mCRL2 data structures. Many algorithms are built on top of this library. The most important
examples are the find and replace functions. The goal of the traversal framework is to provide
algorithms with a uniform interface, and to prevent repetitive code for traversing mCRL2 data
structures.

[endsect]

[section Generic traversal functions]

The mCRL2 Library contains a wide range of algorithms built on top of the traversers and builders.
An overview of the most commonly used traverser based functions is given below.

[table Generic find functions
    [ [Function]                  [Meaning]          ]
    [ [`find_identifiers`       ] [Finds identifiers that occur in an object] ]
    [ [`find_function_symbols`  ] [Finds function symbols that occur in an object within the context of a data expression] ]
    [ [`find_sort_expressions`  ] [Finds sort expressions that occur in an object. Also nested sorts are found. ] ]
    [ [`find_variables`         ] [Finds variables that occur in an object] ]
    [ [`find_free_variables`    ] [Finds free variables that occur in an object] ]
    [ [`find_data_expressions`  ] [Finds data expressions that occur in an object. Also nested expressions are found.] ]
]

[table Generic replace functions
    [ [Function]                  [Meaning]          ]
    [ [`replace_sort_expressions`        ] [Applies a substitution to sort expressions that occur in an object. Optionally it can be applied to nested expressions. ] ]
    [ [`replace_variables`               ] [Applies a substitution to variables that occur in an object within the context of a data expression. ] ]
    [ [`replace_free_variables`          ] [Applies a substitution to free variables that occur in an object within the context of a data expression. ] ]
    [ [`replace_data_expressions`        ] [Applies a substitution to data expressions that occur in an object. Optionally it can be applied to nested expressions. ] ]
    [ [`replace_propositional_variables` ] [Applies a substitution to propositional variable instantiations that occur in an object within the context of a pbes expression. ] ]   
]

[table Other generic traverser based functions
    [ [Function]                  [Meaning]          ]
    [ [`translate_user_notation`        ] [Applies a transformation to numbers, sets and bags that is needed after parsing. ] ]
    [ [`normalize_sorts`                ] [Brings embedded sorts into normal form. ] ]
    [ [`rewrite`                        ] [Applies a rewriter to embedded expressions, optionally in combination with a substitution. ] ]
]

These functions can be applied to a wide range of objects in the mCRL2 Library, ranging from `data::data_expression` to
`lps::action_summand`. Each library has it's own overloads of these functions. For example to find data variables in an
object of the LPS library, the function `lps::find_variables` must be used.

[warning It is important to choose the right overload of generic traverser functions. Failing to do so may
result in compilation errors, or runtime exceptions.
]

[endsect]

[section Example]

[import examples/traverser1.cpp]
[import examples/builder1.cpp]
[import examples/traverser2.cpp]

[traverser1]

[traverser2]

[builder1]

[endsect]

[section Traversal implementation]

  void operator()(const data::forall& x)
  {
    static_cast<Derived&>(*this).enter(x);
    static_cast<Derived&>(*this)(x.variables());
    static_cast<Derived&>(*this)(x.body());
    static_cast<Derived&>(*this).leave(x);
  }

[section:static_polymorphism Static polymorphism]                                                                               
                                                                                                             
For the traversal functions in the mCRL2 a technique called static
polymorphism is used, see also [@ http://en.wikipedia.org/wiki/Template_metaprogramming#Static_polymorphism].
                                                                                                                                                                                                                         
[endsect]

[endsect]
