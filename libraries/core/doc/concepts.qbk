[section Concepts]

In the tables below, X is an substitution type, a and b are constant objects of
type X, s are mutable objects of type X, V is X::variable_type, and v is a
constant object of type V. E is X::expression_type, and e is a constant object
of type E.

A class or built-in type X models the Substitution concept if it models Unary
Function and the following expressions are valid and respect the stated
semantics.

[table Substitution Requirements
 [ [ Expression ] [ Return Type ] ]
 [ [ s(e)       ] [ E           ] ]
 [ [ s(v)       ] [ E           ] ] ]

A class or built-in type X models the Mutable Substitution concept if it models
the Substitution concept and if X::variable_type can be assigned to
X::expression_type. The following expressions are valid and respect the stated
semantics.

[table Mutable Substitution Requirements (in addition to Substitution)
 [ [ Expression ] [ Return Type ] [ Assertion/ Pre-/Post-condition ] ]
 [ [ s\[v\] = e   ] [             ] [ post: s(v) == e ] ]
 [ [ s\[v\] = v   ] [             ] [ post: s(v) == v ] ] ]

The `mutable_substition` template class implements the Mutable Substitution
concept. In addition, it has a number additional member functions in common
with a `std::map`.


[endsect]

