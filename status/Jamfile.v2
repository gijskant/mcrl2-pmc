# mCRL2 regression-testing Jamfile

project status
    : source-location ../test
    : requirements <hardcode-dll-paths>true  
      <dependency>/site-config//boost_headers
      <define>BOOST_ALL_NO_LIB
    ;
        
# Tests from Jamfiles in individual library test subdirectories
# Please keep these in alphabetic order by test-suite name

build-project ../libraries/atermpp/test ;            # test-suite atermpp
build-project ../libraries/core/test ;               # test-suite core
build-project ../libraries/data/test ;               # test-suite data
build-project ../libraries/lps/test ;                # test-suite lps
build-project ../libraries/lts/test ;                # test-suite lts
build-project ../libraries/pbes/test ;               # test-suite pbes
build-project ../tools/squadt/libraries/tipi/test ;  # test-suite tipi
build-project ../libraries/trace/test ;              # test-suite trace
build-project ../libraries/utilities/test ;
build-project ../tools/mcrl22lps/test ;

import set ;

use-project /tools/mcrl22lps : ../tools/mcrl22lps ;

all-tools = [ path.glob-tree $(TOP)/tools/ : Jamfile.v2 ] ;

for tool in [ MATCH .*/tools/(.*)/Jamfile.v2 : $(all-tools) ] {
  use-project /tools/$(tool) : ../tools/$(tool) ;
}

local lps-tools  = [ MATCH .*/tools/(lps.*)/Jamfile.v2 : $(all-tools) ] ;
local pbes-tools = [ MATCH .*/tools/(pbes.*)/Jamfile.v2 : $(all-tools) ] ;
local lts-tools  = [ MATCH .*/tools/(lts.*)/Jamfile.v2 : $(all-tools) ] ;

lps-tools = [ set.difference $(lps-tools) : lps2pbes lps2lts lps2torx ] ;
lts-tools = [ set.difference $(lts-tools) : [ MATCH .*/tools/.*/(.*).plist : [ path.glob-tree $(TOP)/tools/ : *.plist ] ] ] ;

actions generate-lps {
  $(>) $(<)
}

actions generate-pbes {
  $(>[2]) --formula=$(>[3]) $(>[1]) $(<)
}

actions generate-lts {
  $(>[2]) $(>[1]) $(<)
}

make test.lps : /tools/mcrl22lps//mcrl22lps $(TOP)/examples/academic/abp.mcrl2 : @generate-lps ;
make test.pbes : /tools/lps2pbes//lps2pbes $(TOP)/examples/modal-formulas/nodeadlock.mcf test.lps : @generate-pbes ;
make test.svc : /tools/lps2lts//lps2lts test.lps : @generate-lts ;
make test2.svc : /tools/lps2lts//lps2lts test.lps : @generate-lts ;
 
for tool in $(lps-tools) {
  tests += [ run /tools/$(tool)//$(tool) : : test.lps ] ;
}

for tool in $(pbes-tools) {
  tests += [ run /tools/$(tool)//$(tool) : : test.pbes ] ;
}

for tool in $(lts-tools) {
  if $(tool) in ltscompare ltsmin  {
    tests += [ run /tools/$(tool)//$(tool) : : test.svc test2.svc ] ;
  }
  else {
    tests += [ run /tools/$(tool)//$(tool) : : test.svc ] ;
  }
}

test-suite command-line-interface : $(tests) ;
