#!/bin/sh

# Purpose of this script is an easy and reliable way of creating a source
# distribution from a checked out copy of the SVN repository. Special care was
# taken to include the following behaviour
#
#  - the script does not need to do a `make distclean' or similar, but can run
#    on a non-clean source tree while a build is in progress, without interfering
#    with this build. This ensures that a daily build process can be performed
#    using the same source tree.
#  - the distribution is tagged with a revision number that is extracted out of
#    the currently checked-out source tree
#  - build tools specific for the SVN source tree can be left out of a source
#    distribution
#
# Finally take note that this script is not meant to be portable.

if [[ $# != 2 ]]; then
  echo "Usage: $0 <SVN-trunk> [ <target-directory> ]";
  exit 0;
fi

SOURCE_BASE="$1"
TARGET_BASE="$2"

# Assumes that the current working directory contains the trunk directory as checked out from the svn repository

if [[ ! -d ${SOURCE_BASE} ]]; then
  echo "Error:";
  echo "";
  echo " This script should be run from a directory containing";
  echo " the trunk directory of a checked out svn repository.";
  echo "";
  exit 0;
fi
if [[ ! -d ${TARGET_BASE} ]]; then
  echo "Error: <target-directory> must exist and be a directory!";
fi

source_files="./mcrl2/articles \
              ./mcrl2/conventions \
              ./mcrl2/COPYING \
              ./mcrl2/INSTALL \
              ./mcrl2/README \
              ./mcrl2/configure \
              ./mcrl2/config.guess \
              ./mcrl2/config.sub \
              ./mcrl2/config.jam.in \
              ./mcrl2/install-sh \
              ./mcrl2/config.in \
              ./mcrl2/Makefile \
              ./mcrl2/examples \
              ./mcrl2/test.y \
              ./mcrl2/tests \
              ./mcrl2/specs \
              ./mcrl2/utility/revision.mk \
              ./mcrl2/src"

svn_update="$(svn update 2>&1 | tail -n 1)"

# Make sure that the maximum revision tool exists
sh -c "cd ${SOURCE_BASE}; make revision" &> /dev/null

# Alternative method of obtaining the last revision that does not require
# ${SOURCE_BASE}/utility/maximum_revision (but has a potential for not being accurate)
# svn log -q -r HEAD https://svn.win.tue.nl/repos/MCRL2/ \
#  | grep --only-matching -e "^r[[:digit:]]*\ " \
#  | tr -d "r \n"

# Obtain revision number from checked out source tree
revision="$(${SOURCE_BASE}/utility/maximum_revision ${SOURCE_BASE})"

# Determine archive name
archive_name="${TARGET_BASE}/mcrl2-${revision}.tar"

# The following works based on assumption that the source tree is configured
if (! test -e "${archive_name}.bz2"); then
  # Generate tarball for source distribution
  ln -sf ${SOURCE_BASE} ./mcrl2

  # Find binaries and other files with no extension that should be filtered out
  find -L ./mcrl2 -mindepth 2 -type f \
       -not -name '*.*' \
       -not -name 'Makefile' \
       -not -name '*revision' \
       -not -wholename '*boost*' > excludes

  # Find directories to filter out
  find -L ./mcrl2 -type d \
       -name 'html' \
       -or -name 'latex' \
       -or -name 'bin*' \
       -or -wholename '*mcrl2/utility' \
       -or -wholename '*jam/bootstrap' \
       -or -wholename '*boost/stage' \
       -or -wholename '*boost/lib' >> excludes

  tar cf ${archive_name} \
           --exclude '.svn' \
           --exclude '*.ps' \
           --exclude '*.dvi' \
           --exclude '*.ps' \
           --exclude '*.log' \
           --exclude '*.pdf' \
           --exclude 'core*' \
           --exclude 'vgcore*' \
           --exclude '*.d' \
           --exclude '*.dpp' \
           --exclude '*.o' \
           --exclude '*.a' \
           --exclude '*.so' \
           --exclude-from excludes ${source_files}

  unlink mcrl2

  # Mark distribution as source distribution
  mkdir mcrl2

  echo -e  "# This definition is needed to deactivate computation of maximum revision" \
           "\n# numbers just before builds. This computation would fail since the a source" \
           "\n# distribution does not contain the svn meta data. The file is included from" \
           "\n# the make file ./config ." \
           "\n" \
           "\nSOURCE_DISTRIBUTION = 1" \
           "\n" \
           "\nREVISION := -DREVISION=${revision}" > mcrl2/distribution

  tar rf ${archive_name} ./mcrl2/distribution

  unlink mcrl2/distribution
  rmdir mcrl2

  bzip2 -f ${archive_name}

  unlink excludes
fi

# Return archive base name
echo $(basename ${archive_name}.bz2)
