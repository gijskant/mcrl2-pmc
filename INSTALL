Installation Instructions
*************************

Supported compiler suites
=========================

GCC versions 3.4 and higher
MSVC 8.0 (requires service pack 1)
Apple's patched gcc distributed with XCode 2.4.1 and higher

Packages (Debian)
=================

The package names given here are used in Debian. Most of the time they are
called the same on other systems. Only top-level packages are mentioned; lower
level packages are (usually) automatically installed. Furthermore, the status
of the packages is mentioned (required, recommended or optional):
- make >= 3.80: package make [required]
- flex >= 2.5.4a-12: package flex [optional]
- bison >= 2.0: package bison [optional]
- wxWidgets >= 2.6.2: package libwxgtk2.6-dev or libwxgtk2.6-dbg [recommended]
   + for the ltsview tool wxWidgets must be build with OpenGL support (--with-opengl)
- xml2 development libraries >= 2.6.22: package libxml2-dev [recommended]
- default icon locations: package gnome-themes, gnome-themes-extras or
  hicolor-icon-theme [optional]

Note: at this moment the toolset does not properly install without wxWidgets
and libXML2. A workaround is to do a manual install after make. The cause of
this is a bug in Boost Build v2 (build environment) for which no easy
workaround seems possible at this time. At least no solution that does not
bring back problems that have been solved with the last significant changes to
the build procedure.

The required packages enable the following tools:
+ mcrl22lps:   translate an mCRL2 specification into a linear process equation
               (LPS)
+ lpspp:       pretty print an LPS as an mCRL2 specification
+ lpsinfo:     print basic information of an LPS
+ sim:         text based simulator for LPSs
+ lpsrewr:     rewrite data expressions in an LPS
+ lpsdataelm:  remove unused parts of the data specification of an LPS
+ lpsconstelm: remove constant process parameters from an LPS
+ lpsparelm:   remove unused process parameters from an LPS
+ lps2lts:     generate a labelled transition system (LTS) from an LPS
+ ltsinfo:     print basic information of an LTS
+ ltsconvert:  convert an LTS, possibly using minimisation
+ ltscompare:  compare two LTS's
+ tracepp:     pretty print a trace
+ tbf2lps:     convert an mCRL LPS to an mCRL2 LPS
+ lps2torx:    provide TorX with an explorer interface using an LPS

The recommended packages libwxgtk2.6-dev [1] and libxml2-dev [2] enable the
following tools:
+ pnml2mcrl2:  convert classic Petri nets in the PNML format to mCRL2 [2]
+ xsim:        graphical simulator for LPSs [1]
+ ltsgraph:    visualise an LTS in 2D using spring model techniques [1]
+ ltsview:     visualise an LTS in FSM format in 3D using clustering techniques
               [1]
+ squadt:      systems quality analysis and design toolset [1,2]

Any of the default icon location packages ensures that xsim doesn't generate
warnings on missing icons.


Installation
============

To install the toolset to the specified directory DIR (use full names in this
path, do not use ~) with debugging information enabled, do the following:
> ./configure --prefix=DIR --enable-debug
> make
> make install

To clean up, do:
> make clean

To also remove the files generated by configure, do:
> make distclean

The --enable-debug flag is recommended, because this enables assertion
checking. This makes the toolset somewhat slower, however. Note that the
wxWidgets package should match the --enable-debug flag.


Installation under MACOSX
=========================
In order to install the toolset under MACOS10.3 or higher the environment
variable MACOSX_DEPLOYMENT_TARGET must be set to 10.3. For C shell, this can be
achieved by adding the following line to your local .cshrc:

setenv MACOSX_DEPLOYMENT_TARGET 10.3

For bash, add the following line to your local .bashrc:

export MACOSX_DEPLOYMENT_TARGET=10.3

Syntax highlighting (vim)
=========================

To install vim syntax highlighting of mCRL, mCRL2 and EBNF specifications, do
the following (from the root directory of the distribution):
> install -d $HOME/.vim/syntax
> install .vim/syntax/* $HOME/.vim/syntax
- add the following lines to $HOME/.vimrc to enable syntax highlighting (if
  this hasn't been done already):

syntax enable
filetype plugin on

- add the following lines to $HOME/.vim/filetype.vim to link file names to the
  syntax files by their extension:

if exists("did_load_filetypes")
  finish
endif

augroup filetypedetect
  au! BufRead,BufNewFile *.bnf          setfiletype ebnf
  au! BufRead,BufNewFile *.ebnf         setfiletype ebnf
  au! BufRead,BufNewFile *.mcrl         setfiletype mcrl
  au! BufRead,BufNewFile *.mcrl2        setfiletype mcrl2
augroup END
