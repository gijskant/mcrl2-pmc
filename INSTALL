Installation Instructions
*************************

Packages (Debian)
=================

The package names given here are used in Debian. Most of the time they are
called the same on other systems. Only top-level packages are mentioned; lower
level packages are (usually) automatically installed. Furthermore, the status
of the packages is mentioned (required, recommended or optional):
- make >= 3.80: package make [required]
- flex >= 2.5.4a-12: package flex [required]
- bison >= 2.0: package bison [required]
- wxWidgets >= 2.6: package libwxgtk2.6-dev or libwxgtk2.6-dbg [recommended]
- xml2 development libraries >= 2.6.22: package libxml2-dev [recommended]
- default icon locations: package gnome-themes, gnome-themes-extras or
  hicolor-icon-theme [optional]

The required packages enable the following tools:
+ mcrl22lpe:   translate an mCRL2 specification into a linear process equation
               (LPE)
+ lpepp:       pretty print an LPE as an mCRL2 specification
+ lpeinfo:     print basic information of an LPE
+ sim:         text based simulator for LPEs
+ lperewr:     rewrite data expressions in an LPE
+ lpedataelm:  remove unused parts of the data specification of an LPE
+ lpeconstelm: remove constant process parameters from an LPE
+ lpeparelm:   remove unused process parameters from an LPE
+ lpe2lts:     generate a labelled transition system (LTS) from an LPE
+ ltspp:       pretty print an LTS      
+ ltsmin:      minimise an LTS using bisimulation reduction
+ tracepp:     pretty print a trace
+ tbf2lpe:     convert an mCRL LPE to an mCRL2 LPE
+ svc2fsm:     convert an LTS in SVC format to FSM format
+ lpe2torx:    provide TorX with an explorer interface using an LPE

The recommended packages libwxgtk2.6-dev [1] and libxml2-dev [2] enable the
following tools:
+ pnml2mcrl2:  convert classic Petri nets in the PNML format to mCRL2 [2]
+ xsim:        graphical simulator for LPEs [1]
+ ltsview:     visualise an LTS in FSM format in 3D using clustering techniques
               [1]
+ squadt:      systems quality analysis and design tool [1,2]

Any of the default icon location packages ensures that xsim doesn't generate
warnings on missing icons.


Installation
============

To install the toolset to the specified directory DIR (use full names in this
path, do not use ~) with debugging information enabled, do the following:
> ./configure --prefix=DIR --enable-debug
> make
> make install

To clean up, do:
> make clean

To also remove the files generated by configure, do:
> make distclean

The --enable-debug flag is recommended, because this enables assertion
checking. This makes the toolset somewhat slower, however. Note that the
wxWidgets package should match the --enable-debug flag.


Installation under MACOSX
=========================
In order to install the toolset under MACOS10.3 or higher the environment
variable MACOSX_DEPLOYMENT_TARGET must be set to 10.3. For C shell, this can be
achieved by adding the following line to your local .cshrc:

setenv MACOSX_DEPLOYMENT_TARGET 10.3

For bash, add the following line to your local .bashrc:

export MACOSX_DEPLOYMENT_TARGET=10.3


Syntax highlighting (vim)
=========================

To install vim syntax highlighting of mCRL, mCRL2 and EBNF specifications, do
the following (from the root directory of the distribution):
> install -d $HOME/.vim/syntax
> install .vim/syntax/* $HOME/.vim/syntax
- add the following lines to $HOME/.vimrc to enable syntax highlighting (if
  this hasn't been done already):

syntax enable
filetype plugin on

- add the following lines to $HOME/.vim/filetype.vim to link file names to the
  syntax files by their extension:

if exists("did_load_filetypes")
  finish
endif

augroup filetypedetect
  au! BufRead,BufNewFile *.bnf          setfiletype ebnf
  au! BufRead,BufNewFile *.ebnf         setfiletype ebnf
  au! BufRead,BufNewFile *.mcrl         setfiletype mcrl
  au! BufRead,BufNewFile *.mcrl2        setfiletype mcrl2
augroup END
